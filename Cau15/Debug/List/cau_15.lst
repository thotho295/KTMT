
AVRASM ver. 2.1.30  E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\KTMT\Cau_15\Debug\List\cau_15.asm Fri Jan 14 19:58:53 2022

E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\KTMT\Cau_15\Debug\List\cau_15.asm(1090): warning: Register r4 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\KTMT\Cau_15\Debug\List\cau_15.asm(1091): warning: Register r5 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\KTMT\Cau_15\Debug\List\cau_15.asm(1092): warning: Register r7 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\KTMT\Cau_15\Debug\List\cau_15.asm(1093): warning: Register r6 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\KTMT\Cau_15\Debug\List\cau_15.asm(1094): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _speed_value=R4
                 	.DEF _speed_value_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0063 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00004f 5053
000050 4545
000051 3a44
000052 3025      	.DB  0x53,0x50,0x45,0x45,0x44,0x3A,0x25,0x30
000053 6433
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\KTMT\Cau_15\Debug\List\cau_15.asm(1147): warning: .cseg .db misalignment - padding zero byte
000054 0000      	.DB  0x33,0x64,0x0
                 _0x2000003:
000055 c080      	.DB  0x80,0xC0
                 _0x2020060:
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\KTMT\Cau_15\Debug\List\cau_15.asm(1151): warning: .cseg .db misalignment - padding zero byte
000056 0001      	.DB  0x1
                 _0x2020000:
000057 4e2d
000058 4e41
000059 4900
00005a 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\KTMT\Cau_15\Debug\List\cau_15.asm(1154): warning: .cseg .db misalignment - padding zero byte
00005b 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00005c 0002      	.DW  0x02
00005d 0510      	.DW  __base_y_G100
00005e 00aa      	.DW  _0x2000003*2
                 
00005f 0001      	.DW  0x01
000060 0514      	.DW  __seed_G101
000061 00ac      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000062 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000063 94f8      	CLI
000064 27ee      	CLR  R30
000065 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000066 e0f1      	LDI  R31,1
000067 bff5      	OUT  MCUCR,R31
000068 bfe5      	OUT  MCUCR,R30
000069 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00006b e08d      	LDI  R24,(14-2)+1
00006c e0a2      	LDI  R26,2
00006d 27bb      	CLR  R27
                 __CLEAR_REG:
00006e 93ed      	ST   X+,R30
00006f 958a      	DEC  R24
000070 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000071 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000072 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000073 e0a0      	LDI  R26,LOW(__SRAM_START)
000074 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000075 93ed      	ST   X+,R30
000076 9701      	SBIW R24,1
000077 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000078 ebe8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000079 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007a 9185      	LPM  R24,Z+
00007b 9195      	LPM  R25,Z+
00007c 9700      	SBIW R24,0
00007d f061      	BREQ __GLOBAL_INI_END
00007e 91a5      	LPM  R26,Z+
00007f 91b5      	LPM  R27,Z+
000080 9005      	LPM  R0,Z+
000081 9015      	LPM  R1,Z+
000082 01bf      	MOVW R22,R30
000083 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000084 9005      	LPM  R0,Z+
000085 920d      	ST   X+,R0
000086 9701      	SBIW R24,1
000087 f7e1      	BRNE __GLOBAL_INI_LOOP
000088 01fb      	MOVW R30,R22
000089 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00008a bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008b efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008c bfed      	OUT  SPL,R30
00008d e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008e bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008f e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000090 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000091 940c 00b7 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * cau_15.c
                 ; *
                 ; * Created: 1/14/2022 14:05:14
                 ; * Author: gold_
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;
                 ;#define BT1     PINB.1
                 ;#define DIR     PORTD.7
                 ;#define SPEED   OCR0
                 ;
                 ;char buffer[16];
                 ;int speed_value;
                 ;
                 ;void update_lcd() {
                 ; 0000 0015 void update_lcd() {
                 
                 	.CSEG
                 _update_lcd:
                 ; .FSTART _update_lcd
                 ; 0000 0016     speed_value = 255 - SPEED;
000093 b7e1      	IN   R30,0x31
000094 e0f0      	LDI  R31,0
000095 efaf      	LDI  R26,LOW(255)
000096 e0b0      	LDI  R27,HIGH(255)
000097 1bae      	SUB  R26,R30
000098 0bbf      	SBC  R27,R31
000099 012d      	MOVW R4,R26
                 ; 0000 0017     lcd_gotoxy(0, 0);
00009a e0e0      	LDI  R30,LOW(0)
00009b 93ea      	ST   -Y,R30
00009c e0a0      	LDI  R26,LOW(0)
00009d d078      	RCALL _lcd_gotoxy
                 ; 0000 0018     sprintf(buffer,"SPEED:%03d",speed_value);
00009e e0e0      	LDI  R30,LOW(_buffer)
00009f e0f5      	LDI  R31,HIGH(_buffer)
0000a0 93fa      	ST   -Y,R31
0000a1 93ea      	ST   -Y,R30
                +
0000a2 e9ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000a3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000a4 93fa      	ST   -Y,R31
0000a5 93ea      	ST   -Y,R30
0000a6 01f2      	MOVW R30,R4
0000a7 940e 0391 	CALL __CWD1
0000a9 940e 039e 	CALL __PUTPARD1
0000ab e084      	LDI  R24,4
0000ac 940e 02f8 	CALL _sprintf
0000ae 9628      	ADIW R28,8
                 ; 0000 0019     lcd_puts(buffer);
0000af e0a0      	LDI  R26,LOW(_buffer)
0000b0 e0b5      	LDI  R27,HIGH(_buffer)
0000b1 d092      	RCALL _lcd_puts
                 ; 0000 001A     delay_ms(5);
0000b2 e0a5      	LDI  R26,LOW(5)
0000b3 e0b0      	LDI  R27,0
0000b4 940e 037f 	CALL _delay_ms
                 ; 0000 001B }
0000b6 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 001E {
                 _main:
                 ; .FSTART _main
                 ; 0000 001F     DDRB = 0x10;
0000b7 e1e0      	LDI  R30,LOW(16)
0000b8 bbe7      	OUT  0x17,R30
                 ; 0000 0020     PORTB = 0x0E;
0000b9 e0ee      	LDI  R30,LOW(14)
0000ba bbe8      	OUT  0x18,R30
                 ; 0000 0021     DDRD = 0x80;
0000bb e8e0      	LDI  R30,LOW(128)
0000bc bbe1      	OUT  0x11,R30
                 ; 0000 0022 
                 ; 0000 0023     ASSR=0<<AS0;
0000bd e0e0      	LDI  R30,LOW(0)
0000be bfe0      	OUT  0x30,R30
                 ; 0000 0024     TCCR0=(1<<WGM00) | (1<<COM01) | (1<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
0000bf e7e4      	LDI  R30,LOW(116)
0000c0 bfe3      	OUT  0x33,R30
                 ; 0000 0025     TCNT0=0x00;
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bfe2      	OUT  0x32,R30
                 ; 0000 0026     OCR0=0xFF;
0000c3 efef      	LDI  R30,LOW(255)
0000c4 bfe1      	OUT  0x31,R30
                 ; 0000 0027 
                 ; 0000 0028     lcd_init(16);
0000c5 e1a0      	LDI  R26,LOW(16)
0000c6 d08e      	RCALL _lcd_init
                 ; 0000 0029     delay_ms(20);
0000c7 e1a4      	LDI  R26,LOW(20)
0000c8 e0b0      	LDI  R27,0
0000c9 940e 037f 	CALL _delay_ms
                 ; 0000 002A while (1)
                 _0x3:
                 ; 0000 002B     {
                 ; 0000 002C         if(BT1 == 0) {
0000cb 99b1      	SBIC 0x16,1
0000cc c009      	RJMP _0x6
                 ; 0000 002D             if(SPEED == 0) {
0000cd b7e1      	IN   R30,0x31
0000ce 30e0      	CPI  R30,0
0000cf f411      	BRNE _0x7
                 ; 0000 002E                 SPEED = 0;
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 c002      	RJMP _0xD
                 ; 0000 002F             } else {
                 _0x7:
                 ; 0000 0030                 SPEED = SPEED - 5;
0000d2 b7e1      	IN   R30,0x31
0000d3 50e5      	SUBI R30,LOW(5)
                 _0xD:
0000d4 bfe1      	OUT  0x31,R30
                 ; 0000 0031             }
                 ; 0000 0032             update_lcd();
0000d5 c00c      	RJMP _0xE
                 ; 0000 0033         } else {
                 _0x6:
                 ; 0000 0034             if(SPEED == 255) {
0000d6 b7e1      	IN   R30,0x31
0000d7 3fef      	CPI  R30,LOW(0xFF)
0000d8 f411      	BRNE _0xA
                 ; 0000 0035                 SPEED = 255;
0000d9 efef      	LDI  R30,LOW(255)
0000da c002      	RJMP _0xF
                 ; 0000 0036             } else {
                 _0xA:
                 ; 0000 0037                 SPEED = SPEED + 5;
0000db b7e1      	IN   R30,0x31
0000dc 5feb      	SUBI R30,-LOW(5)
                 _0xF:
0000dd bfe1      	OUT  0x31,R30
                 ; 0000 0038             }
                 ; 0000 0039             delay_ms(5);
0000de e0a5      	LDI  R26,LOW(5)
0000df e0b0      	LDI  R27,0
0000e0 940e 037f 	CALL _delay_ms
                 ; 0000 003A             update_lcd();
                 _0xE:
0000e2 dfb0      	RCALL _update_lcd
                 ; 0000 003B         }
                 ; 0000 003C     }
0000e3 cfe7      	RJMP _0x3
                 ; 0000 003D }
                 _0xC:
0000e4 cfff      	RJMP _0xC
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000e5 93aa      	ST   -Y,R26
0000e6 81e8      	LD   R30,Y
0000e7 71e0      	ANDI R30,LOW(0x10)
0000e8 f011      	BREQ _0x2000004
0000e9 9adb      	SBI  0x1B,3
0000ea c001      	RJMP _0x2000005
                 _0x2000004:
0000eb 98db      	CBI  0x1B,3
                 _0x2000005:
0000ec 81e8      	LD   R30,Y
0000ed 72e0      	ANDI R30,LOW(0x20)
0000ee f011      	BREQ _0x2000006
0000ef 9adc      	SBI  0x1B,4
0000f0 c001      	RJMP _0x2000007
                 _0x2000006:
0000f1 98dc      	CBI  0x1B,4
                 _0x2000007:
0000f2 81e8      	LD   R30,Y
0000f3 74e0      	ANDI R30,LOW(0x40)
0000f4 f011      	BREQ _0x2000008
0000f5 9add      	SBI  0x1B,5
0000f6 c001      	RJMP _0x2000009
                 _0x2000008:
0000f7 98dd      	CBI  0x1B,5
                 _0x2000009:
0000f8 81e8      	LD   R30,Y
0000f9 78e0      	ANDI R30,LOW(0x80)
0000fa f011      	BREQ _0x200000A
0000fb 9ade      	SBI  0x1B,6
0000fc c001      	RJMP _0x200000B
                 _0x200000A:
0000fd 98de      	CBI  0x1B,6
                 _0x200000B:
                +
0000fe e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000ff 958a     +DEC R24
000100 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000101 9ada      	SBI  0x1B,2
                +
000102 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000103 958a     +DEC R24
000104 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000105 98da      	CBI  0x1B,2
                +
000106 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000107 958a     +DEC R24
000108 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000109 c078      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00010a 93aa      	ST   -Y,R26
00010b 81a8      	LD   R26,Y
00010c dfd8      	RCALL __lcd_write_nibble_G100
00010d 81e8          ld    r30,y
00010e 95e2          swap  r30
00010f 83e8          st    y,r30
000110 81a8      	LD   R26,Y
000111 dfd3      	RCALL __lcd_write_nibble_G100
                +
000112 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000113 958a     +DEC R24
000114 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000115 c06c      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000116 93aa      	ST   -Y,R26
000117 81e8      	LD   R30,Y
000118 e0f0      	LDI  R31,0
000119 5fe0      	SUBI R30,LOW(-__base_y_G100)
00011a 4ffa      	SBCI R31,HIGH(-__base_y_G100)
00011b 81e0      	LD   R30,Z
00011c 81a9      	LDD  R26,Y+1
00011d 0fae      	ADD  R26,R30
00011e dfeb      	RCALL __lcd_write_data
00011f 8079      	LDD  R7,Y+1
000120 8068      	LDD  R6,Y+0
000121 9622      	ADIW R28,2
000122 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000123 e0a2      	LDI  R26,LOW(2)
000124 940e 0345 	CALL SUBOPT_0x0
000126 e0ac      	LDI  R26,LOW(12)
000127 dfe2      	RCALL __lcd_write_data
000128 e0a1      	LDI  R26,LOW(1)
000129 940e 0345 	CALL SUBOPT_0x0
00012b e0e0      	LDI  R30,LOW(0)
00012c 2e6e      	MOV  R6,R30
00012d 2e7e      	MOV  R7,R30
00012e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00012f 93aa      	ST   -Y,R26
000130 81a8      	LD   R26,Y
000131 30aa      	CPI  R26,LOW(0xA)
000132 f011      	BREQ _0x2000011
000133 1479      	CP   R7,R9
000134 f048      	BRLO _0x2000010
                 _0x2000011:
000135 e0e0      	LDI  R30,LOW(0)
000136 93ea      	ST   -Y,R30
000137 9463      	INC  R6
000138 2da6      	MOV  R26,R6
000139 dfdc      	RCALL _lcd_gotoxy
00013a 81a8      	LD   R26,Y
00013b 30aa      	CPI  R26,LOW(0xA)
00013c f409      	BRNE _0x2000013
00013d c044      	RJMP _0x20C0002
                 _0x2000013:
                 _0x2000010:
00013e 9473      	INC  R7
00013f 9ad8      	SBI  0x1B,0
000140 81a8      	LD   R26,Y
000141 dfc8      	RCALL __lcd_write_data
000142 98d8      	CBI  0x1B,0
000143 c03e      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000144 93ba      	ST   -Y,R27
000145 93aa      	ST   -Y,R26
000146 931a      	ST   -Y,R17
                 _0x2000014:
000147 81a9      	LDD  R26,Y+1
000148 81ba      	LDD  R27,Y+1+1
000149 91ed      	LD   R30,X+
00014a 83a9      	STD  Y+1,R26
00014b 83ba      	STD  Y+1+1,R27
00014c 2f1e      	MOV  R17,R30
00014d 30e0      	CPI  R30,0
00014e f019      	BREQ _0x2000016
00014f 2fa1      	MOV  R26,R17
000150 dfde      	RCALL _lcd_putchar
000151 cff5      	RJMP _0x2000014
                 _0x2000016:
000152 8118      	LDD  R17,Y+0
000153 9623      	ADIW R28,3
000154 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000155 93aa      	ST   -Y,R26
000156 9ad3      	SBI  0x1A,3
000157 9ad4      	SBI  0x1A,4
000158 9ad5      	SBI  0x1A,5
000159 9ad6      	SBI  0x1A,6
00015a 9ad2      	SBI  0x1A,2
00015b 9ad0      	SBI  0x1A,0
00015c 9ad1      	SBI  0x1A,1
00015d 98da      	CBI  0x1B,2
00015e 98d8      	CBI  0x1B,0
00015f 98d9      	CBI  0x1B,1
000160 8098      	LDD  R9,Y+0
000161 81e8      	LD   R30,Y
000162 58e0      	SUBI R30,-LOW(128)
                +
000163 93e0 0512+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000165 81e8      	LD   R30,Y
000166 54e0      	SUBI R30,-LOW(192)
                +
000167 93e0 0513+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000169 e1a4      	LDI  R26,LOW(20)
00016a e0b0      	LDI  R27,0
00016b 940e 037f 	CALL _delay_ms
00016d 940e 034b 	CALL SUBOPT_0x1
00016f 940e 034b 	CALL SUBOPT_0x1
000171 940e 034b 	CALL SUBOPT_0x1
000173 e2a0      	LDI  R26,LOW(32)
000174 df70      	RCALL __lcd_write_nibble_G100
                +
000175 ec88     +LDI R24 , LOW ( 200 )
000176 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000177 9701     +SBIW R24 , 1
000178 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000179 e2a8      	LDI  R26,LOW(40)
00017a df8f      	RCALL __lcd_write_data
00017b e0a4      	LDI  R26,LOW(4)
00017c df8d      	RCALL __lcd_write_data
00017d e8a5      	LDI  R26,LOW(133)
00017e df8b      	RCALL __lcd_write_data
00017f e0a6      	LDI  R26,LOW(6)
000180 df89      	RCALL __lcd_write_data
000181 dfa1      	RCALL _lcd_clear
                 _0x20C0002:
000182 9621      	ADIW R28,1
000183 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
000184 93ba      	ST   -Y,R27
000185 93aa      	ST   -Y,R26
000186 931a      	ST   -Y,R17
000187 930a      	ST   -Y,R16
000188 81aa      	LDD  R26,Y+2
000189 81bb      	LDD  R27,Y+2+1
00018a 9612      	ADIW R26,2
00018b 940e 0396 	CALL __GETW1P
00018d 9730      	SBIW R30,0
00018e f159      	BREQ _0x2040010
00018f 81aa      	LDD  R26,Y+2
000190 81bb      	LDD  R27,Y+2+1
000191 9614      	ADIW R26,4
000192 940e 0396 	CALL __GETW1P
000194 018f      	MOVW R16,R30
000195 9730      	SBIW R30,0
000196 f061      	BREQ _0x2040012
                +
000197 3002     +CPI R16 , LOW ( 2 )
000198 e0e0     +LDI R30 , HIGH ( 2 )
000199 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00019a f098      	BRLO _0x2040013
00019b 01f8      	MOVW R30,R16
00019c 9731      	SBIW R30,1
00019d 018f      	MOVW R16,R30
                +
00019e 81aa     +LDD R26 , Y + 2
00019f 81bb     +LDD R27 , Y + 2 + 1
0001a0 9614     +ADIW R26 , 4
0001a1 93ed     +ST X + , R30
0001a2 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
0001a3 81aa      	LDD  R26,Y+2
0001a4 81bb      	LDD  R27,Y+2+1
0001a5 9612      	ADIW R26,2
0001a6 91ed      	LD   R30,X+
0001a7 91fd      	LD   R31,X+
0001a8 9631      	ADIW R30,1
0001a9 93fe      	ST   -X,R31
0001aa 93ee      	ST   -X,R30
0001ab 9731      	SBIW R30,1
0001ac 81ac      	LDD  R26,Y+4
0001ad 83a0      	STD  Z+0,R26
                 _0x2040013:
0001ae 81aa      	LDD  R26,Y+2
0001af 81bb      	LDD  R27,Y+2+1
0001b0 940e 0396 	CALL __GETW1P
0001b2 23ff      	TST  R31
0001b3 f02a      	BRMI _0x2040014
0001b4 91ed      	LD   R30,X+
0001b5 91fd      	LD   R31,X+
0001b6 9631      	ADIW R30,1
0001b7 93fe      	ST   -X,R31
0001b8 93ee      	ST   -X,R30
                 _0x2040014:
0001b9 c006      	RJMP _0x2040015
                 _0x2040010:
0001ba 81aa      	LDD  R26,Y+2
0001bb 81bb      	LDD  R27,Y+2+1
0001bc efef      	LDI  R30,LOW(65535)
0001bd efff      	LDI  R31,HIGH(65535)
0001be 93ed      	ST   X+,R30
0001bf 93fc      	ST   X,R31
                 _0x2040015:
0001c0 8119      	LDD  R17,Y+1
0001c1 8108      	LDD  R16,Y+0
0001c2 9625      	ADIW R28,5
0001c3 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
0001c4 93ba      	ST   -Y,R27
0001c5 93aa      	ST   -Y,R26
0001c6 9726      	SBIW R28,6
0001c7 940e 03a3 	CALL __SAVELOCR6
0001c9 e010      	LDI  R17,0
0001ca 85ac      	LDD  R26,Y+12
0001cb 85bd      	LDD  R27,Y+12+1
0001cc e0e0      	LDI  R30,LOW(0)
0001cd e0f0      	LDI  R31,HIGH(0)
0001ce 93ed      	ST   X+,R30
0001cf 93fc      	ST   X,R31
                 _0x2040016:
0001d0 89ea      	LDD  R30,Y+18
0001d1 89fb      	LDD  R31,Y+18+1
0001d2 9631      	ADIW R30,1
0001d3 8bea      	STD  Y+18,R30
0001d4 8bfb      	STD  Y+18+1,R31
0001d5 9731      	SBIW R30,1
0001d6 91e4      	LPM  R30,Z
0001d7 2f2e      	MOV  R18,R30
0001d8 30e0      	CPI  R30,0
0001d9 f409      	BRNE PC+2
0001da c115      	RJMP _0x2040018
0001db 2fe1      	MOV  R30,R17
0001dc 30e0      	CPI  R30,0
0001dd f439      	BRNE _0x204001C
0001de 3225      	CPI  R18,37
0001df f411      	BRNE _0x204001D
0001e0 e011      	LDI  R17,LOW(1)
0001e1 c002      	RJMP _0x204001E
                 _0x204001D:
0001e2 940e 0353 	CALL SUBOPT_0x2
                 _0x204001E:
0001e4 c10a      	RJMP _0x204001B
                 _0x204001C:
0001e5 30e1      	CPI  R30,LOW(0x1)
0001e6 f4a9      	BRNE _0x204001F
0001e7 3225      	CPI  R18,37
0001e8 f419      	BRNE _0x2040020
0001e9 940e 0353 	CALL SUBOPT_0x2
0001eb c102      	RJMP _0x20400CC
                 _0x2040020:
0001ec e012      	LDI  R17,LOW(2)
0001ed e040      	LDI  R20,LOW(0)
0001ee e000      	LDI  R16,LOW(0)
0001ef 322d      	CPI  R18,45
0001f0 f411      	BRNE _0x2040021
0001f1 e001      	LDI  R16,LOW(1)
0001f2 c0fc      	RJMP _0x204001B
                 _0x2040021:
0001f3 322b      	CPI  R18,43
0001f4 f411      	BRNE _0x2040022
0001f5 e24b      	LDI  R20,LOW(43)
0001f6 c0f8      	RJMP _0x204001B
                 _0x2040022:
0001f7 3220      	CPI  R18,32
0001f8 f411      	BRNE _0x2040023
0001f9 e240      	LDI  R20,LOW(32)
0001fa c0f4      	RJMP _0x204001B
                 _0x2040023:
0001fb c002      	RJMP _0x2040024
                 _0x204001F:
0001fc 30e2      	CPI  R30,LOW(0x2)
0001fd f439      	BRNE _0x2040025
                 _0x2040024:
0001fe e050      	LDI  R21,LOW(0)
0001ff e013      	LDI  R17,LOW(3)
000200 3320      	CPI  R18,48
000201 f411      	BRNE _0x2040026
000202 6800      	ORI  R16,LOW(128)
000203 c0eb      	RJMP _0x204001B
                 _0x2040026:
000204 c003      	RJMP _0x2040027
                 _0x2040025:
000205 30e3      	CPI  R30,LOW(0x3)
000206 f009      	BREQ PC+2
000207 c0e7      	RJMP _0x204001B
                 _0x2040027:
000208 3320      	CPI  R18,48
000209 f010      	BRLO _0x204002A
00020a 332a      	CPI  R18,58
00020b f008      	BRLO _0x204002B
                 _0x204002A:
00020c c007      	RJMP _0x2040029
                 _0x204002B:
00020d e0aa      	LDI  R26,LOW(10)
00020e 9f5a      	MUL  R21,R26
00020f 2d50      	MOV  R21,R0
000210 2fe2      	MOV  R30,R18
000211 53e0      	SUBI R30,LOW(48)
000212 0f5e      	ADD  R21,R30
000213 c0db      	RJMP _0x204001B
                 _0x2040029:
000214 2fe2      	MOV  R30,R18
000215 36e3      	CPI  R30,LOW(0x63)
000216 f449      	BRNE _0x204002F
000217 940e 035a 	CALL SUBOPT_0x3
000219 89e8      	LDD  R30,Y+16
00021a 89f9      	LDD  R31,Y+16+1
00021b 81a4      	LDD  R26,Z+4
00021c 93aa      	ST   -Y,R26
00021d 940e 0360 	CALL SUBOPT_0x4
00021f c0ce      	RJMP _0x2040030
                 _0x204002F:
000220 37e3      	CPI  R30,LOW(0x73)
000221 f441      	BRNE _0x2040032
000222 940e 035a 	CALL SUBOPT_0x3
000224 940e 0366 	CALL SUBOPT_0x5
000226 940e 032c 	CALL _strlen
000228 2f1e      	MOV  R17,R30
000229 c00a      	RJMP _0x2040033
                 _0x2040032:
00022a 37e0      	CPI  R30,LOW(0x70)
00022b f461      	BRNE _0x2040035
00022c 940e 035a 	CALL SUBOPT_0x3
00022e 940e 0366 	CALL SUBOPT_0x5
000230 940e 0338 	CALL _strlenf
000232 2f1e      	MOV  R17,R30
000233 6008      	ORI  R16,LOW(8)
                 _0x2040033:
000234 6002      	ORI  R16,LOW(2)
000235 770f      	ANDI R16,LOW(127)
000236 e030      	LDI  R19,LOW(0)
000237 c034      	RJMP _0x2040036
                 _0x2040035:
000238 36e4      	CPI  R30,LOW(0x64)
000239 f011      	BREQ _0x2040039
00023a 36e9      	CPI  R30,LOW(0x69)
00023b f411      	BRNE _0x204003A
                 _0x2040039:
00023c 6004      	ORI  R16,LOW(4)
00023d c002      	RJMP _0x204003B
                 _0x204003A:
00023e 37e5      	CPI  R30,LOW(0x75)
00023f f431      	BRNE _0x204003C
                 _0x204003B:
000240 e8ec      	LDI  R30,LOW(_tbl10_G102*2)
000241 e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
000242 83ee      	STD  Y+6,R30
000243 83ff      	STD  Y+6+1,R31
000244 e015      	LDI  R17,LOW(5)
000245 c00c      	RJMP _0x204003D
                 _0x204003C:
000246 35e8      	CPI  R30,LOW(0x58)
000247 f411      	BRNE _0x204003F
000248 6008      	ORI  R16,LOW(8)
000249 c003      	RJMP _0x2040040
                 _0x204003F:
00024a 37e8      	CPI  R30,LOW(0x78)
00024b f009      	BREQ PC+2
00024c c0a1      	RJMP _0x2040071
                 _0x2040040:
00024d e9e6      	LDI  R30,LOW(_tbl16_G102*2)
00024e e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
00024f 83ee      	STD  Y+6,R30
000250 83ff      	STD  Y+6+1,R31
000251 e014      	LDI  R17,LOW(4)
                 _0x204003D:
000252 ff02      	SBRS R16,2
000253 c014      	RJMP _0x2040042
000254 940e 035a 	CALL SUBOPT_0x3
000256 940e 0370 	CALL SUBOPT_0x6
000258 85ab      	LDD  R26,Y+11
000259 23aa      	TST  R26
00025a f43a      	BRPL _0x2040043
00025b 85ea      	LDD  R30,Y+10
00025c 85fb      	LDD  R31,Y+10+1
00025d 940e 038d 	CALL __ANEGW1
00025f 87ea      	STD  Y+10,R30
000260 87fb      	STD  Y+10+1,R31
000261 e24d      	LDI  R20,LOW(45)
                 _0x2040043:
000262 3040      	CPI  R20,0
000263 f011      	BREQ _0x2040044
000264 5f1f      	SUBI R17,-LOW(1)
000265 c001      	RJMP _0x2040045
                 _0x2040044:
000266 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
000267 c004      	RJMP _0x2040046
                 _0x2040042:
000268 940e 035a 	CALL SUBOPT_0x3
00026a 940e 0370 	CALL SUBOPT_0x6
                 _0x2040046:
                 _0x2040036:
00026c fd00      	SBRC R16,0
00026d c011      	RJMP _0x2040047
                 _0x2040048:
00026e 1715      	CP   R17,R21
00026f f478      	BRSH _0x204004A
000270 ff07      	SBRS R16,7
000271 c008      	RJMP _0x204004B
000272 ff02      	SBRS R16,2
000273 c004      	RJMP _0x204004C
000274 7f0b      	ANDI R16,LOW(251)
000275 2f24      	MOV  R18,R20
000276 5011      	SUBI R17,LOW(1)
000277 c001      	RJMP _0x204004D
                 _0x204004C:
000278 e320      	LDI  R18,LOW(48)
                 _0x204004D:
000279 c001      	RJMP _0x204004E
                 _0x204004B:
00027a e220      	LDI  R18,LOW(32)
                 _0x204004E:
00027b 940e 0353 	CALL SUBOPT_0x2
00027d 5051      	SUBI R21,LOW(1)
00027e cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
00027f 2f31      	MOV  R19,R17
000280 ff01      	SBRS R16,1
000281 c017      	RJMP _0x204004F
                 _0x2040050:
000282 3030      	CPI  R19,0
000283 f0a1      	BREQ _0x2040052
000284 ff03      	SBRS R16,3
000285 c006      	RJMP _0x2040053
000286 81ee      	LDD  R30,Y+6
000287 81ff      	LDD  R31,Y+6+1
000288 9125      	LPM  R18,Z+
000289 83ee      	STD  Y+6,R30
00028a 83ff      	STD  Y+6+1,R31
00028b c005      	RJMP _0x2040054
                 _0x2040053:
00028c 81ae      	LDD  R26,Y+6
00028d 81bf      	LDD  R27,Y+6+1
00028e 912d      	LD   R18,X+
00028f 83ae      	STD  Y+6,R26
000290 83bf      	STD  Y+6+1,R27
                 _0x2040054:
000291 940e 0353 	CALL SUBOPT_0x2
000293 3050      	CPI  R21,0
000294 f009      	BREQ _0x2040055
000295 5051      	SUBI R21,LOW(1)
                 _0x2040055:
000296 5031      	SUBI R19,LOW(1)
000297 cfea      	RJMP _0x2040050
                 _0x2040052:
000298 c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
000299 e320      	LDI  R18,LOW(48)
00029a 81ee      	LDD  R30,Y+6
00029b 81ff      	LDD  R31,Y+6+1
00029c 940e 039a 	CALL __GETW1PF
00029e 87e8      	STD  Y+8,R30
00029f 87f9      	STD  Y+8+1,R31
0002a0 81ee      	LDD  R30,Y+6
0002a1 81ff      	LDD  R31,Y+6+1
0002a2 9632      	ADIW R30,2
0002a3 83ee      	STD  Y+6,R30
0002a4 83ff      	STD  Y+6+1,R31
                 _0x204005A:
0002a5 85e8      	LDD  R30,Y+8
0002a6 85f9      	LDD  R31,Y+8+1
0002a7 85aa      	LDD  R26,Y+10
0002a8 85bb      	LDD  R27,Y+10+1
0002a9 17ae      	CP   R26,R30
0002aa 07bf      	CPC  R27,R31
0002ab f050      	BRLO _0x204005C
0002ac 5f2f      	SUBI R18,-LOW(1)
0002ad 85a8      	LDD  R26,Y+8
0002ae 85b9      	LDD  R27,Y+8+1
0002af 85ea      	LDD  R30,Y+10
0002b0 85fb      	LDD  R31,Y+10+1
0002b1 1bea      	SUB  R30,R26
0002b2 0bfb      	SBC  R31,R27
0002b3 87ea      	STD  Y+10,R30
0002b4 87fb      	STD  Y+10+1,R31
0002b5 cfef      	RJMP _0x204005A
                 _0x204005C:
0002b6 332a      	CPI  R18,58
0002b7 f028      	BRLO _0x204005D
0002b8 ff03      	SBRS R16,3
0002b9 c002      	RJMP _0x204005E
0002ba 5f29      	SUBI R18,-LOW(7)
0002bb c001      	RJMP _0x204005F
                 _0x204005E:
0002bc 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
0002bd fd04      	SBRC R16,4
0002be c01a      	RJMP _0x2040061
0002bf 3321      	CPI  R18,49
0002c0 f420      	BRSH _0x2040063
0002c1 85a8      	LDD  R26,Y+8
0002c2 85b9      	LDD  R27,Y+8+1
0002c3 9711      	SBIW R26,1
0002c4 f409      	BRNE _0x2040062
                 _0x2040063:
0002c5 c009      	RJMP _0x20400CD
                 _0x2040062:
0002c6 1753      	CP   R21,R19
0002c7 f010      	BRLO _0x2040067
0002c8 ff00      	SBRS R16,0
0002c9 c001      	RJMP _0x2040068
                 _0x2040067:
0002ca c013      	RJMP _0x2040066
                 _0x2040068:
0002cb e220      	LDI  R18,LOW(32)
0002cc ff07      	SBRS R16,7
0002cd c00b      	RJMP _0x2040069
0002ce e320      	LDI  R18,LOW(48)
                 _0x20400CD:
0002cf 6100      	ORI  R16,LOW(16)
0002d0 ff02      	SBRS R16,2
0002d1 c007      	RJMP _0x204006A
0002d2 7f0b      	ANDI R16,LOW(251)
0002d3 934a      	ST   -Y,R20
0002d4 940e 0360 	CALL SUBOPT_0x4
0002d6 3050      	CPI  R21,0
0002d7 f009      	BREQ _0x204006B
0002d8 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
0002d9 940e 0353 	CALL SUBOPT_0x2
0002db 3050      	CPI  R21,0
0002dc f009      	BREQ _0x204006C
0002dd 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
0002de 5031      	SUBI R19,LOW(1)
0002df 85a8      	LDD  R26,Y+8
0002e0 85b9      	LDD  R27,Y+8+1
0002e1 9712      	SBIW R26,2
0002e2 f008      	BRLO _0x2040059
0002e3 cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
0002e4 ff00      	SBRS R16,0
0002e5 c008      	RJMP _0x204006D
                 _0x204006E:
0002e6 3050      	CPI  R21,0
0002e7 f031      	BREQ _0x2040070
0002e8 5051      	SUBI R21,LOW(1)
0002e9 e2e0      	LDI  R30,LOW(32)
0002ea 93ea      	ST   -Y,R30
0002eb 940e 0360 	CALL SUBOPT_0x4
0002ed cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
0002ee e010      	LDI  R17,LOW(0)
                 _0x204001B:
0002ef cee0      	RJMP _0x2040016
                 _0x2040018:
0002f0 85ac      	LDD  R26,Y+12
0002f1 85bd      	LDD  R27,Y+12+1
0002f2 940e 0396 	CALL __GETW1P
0002f4 940e 03aa 	CALL __LOADLOCR6
0002f6 9664      	ADIW R28,20
0002f7 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002f8 92ff      	PUSH R15
0002f9 2ef8      	MOV  R15,R24
0002fa 9726      	SBIW R28,6
0002fb 940e 03a5 	CALL __SAVELOCR4
0002fd 940e 0378 	CALL SUBOPT_0x7
0002ff 9730      	SBIW R30,0
000300 f419      	BRNE _0x2040072
000301 efef      	LDI  R30,LOW(65535)
000302 efff      	LDI  R31,HIGH(65535)
000303 c023      	RJMP _0x20C0001
                 _0x2040072:
000304 01de      	MOVW R26,R28
000305 9616      	ADIW R26,6
000306 940e 0389 	CALL __ADDW2R15
000308 018d      	MOVW R16,R26
000309 940e 0378 	CALL SUBOPT_0x7
00030b 83ee      	STD  Y+6,R30
00030c 83ff      	STD  Y+6+1,R31
00030d e0e0      	LDI  R30,LOW(0)
00030e 87e8      	STD  Y+8,R30
00030f 87e9      	STD  Y+8+1,R30
000310 01de      	MOVW R26,R28
000311 961a      	ADIW R26,10
000312 940e 0389 	CALL __ADDW2R15
000314 940e 0396 	CALL __GETW1P
000316 93fa      	ST   -Y,R31
000317 93ea      	ST   -Y,R30
000318 931a      	ST   -Y,R17
000319 930a      	ST   -Y,R16
00031a e8e4      	LDI  R30,LOW(_put_buff_G102)
00031b e0f1      	LDI  R31,HIGH(_put_buff_G102)
00031c 93fa      	ST   -Y,R31
00031d 93ea      	ST   -Y,R30
00031e 01de      	MOVW R26,R28
00031f 961a      	ADIW R26,10
000320 dea3      	RCALL __print_G102
000321 019f      	MOVW R18,R30
000322 81ae      	LDD  R26,Y+6
000323 81bf      	LDD  R27,Y+6+1
000324 e0e0      	LDI  R30,LOW(0)
000325 93ec      	ST   X,R30
000326 01f9      	MOVW R30,R18
                 _0x20C0001:
000327 940e 03ac 	CALL __LOADLOCR4
000329 962a      	ADIW R28,10
00032a 90ff      	POP  R15
00032b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00032c 93ba      	ST   -Y,R27
00032d 93aa      	ST   -Y,R26
00032e 91a9          ld   r26,y+
00032f 91b9          ld   r27,y+
000330 27ee          clr  r30
000331 27ff          clr  r31
                 strlen0:
000332 916d          ld   r22,x+
000333 2366          tst  r22
000334 f011          breq strlen1
000335 9631          adiw r30,1
000336 cffb          rjmp strlen0
                 strlen1:
000337 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000338 93ba      	ST   -Y,R27
000339 93aa      	ST   -Y,R26
00033a 27aa          clr  r26
00033b 27bb          clr  r27
00033c 91e9          ld   r30,y+
00033d 91f9          ld   r31,y+
                 strlenf0:
00033e 9005      	lpm  r0,z+
00033f 2000          tst  r0
000340 f011          breq strlenf1
000341 9611          adiw r26,1
000342 cffb          rjmp strlenf0
                 strlenf1:
000343 01fd          movw r30,r26
000344 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _buffer:
000500           	.BYTE 0x10
                 __base_y_G100:
000510           	.BYTE 0x4
                 __seed_G101:
000514           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000345 940e 010a 	CALL __lcd_write_data
000347 e0a3      	LDI  R26,LOW(3)
000348 e0b0      	LDI  R27,0
000349 940c 037f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00034b e3a0      	LDI  R26,LOW(48)
00034c 940e 00e5 	CALL __lcd_write_nibble_G100
                +
00034e ec88     +LDI R24 , LOW ( 200 )
00034f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000350 9701     +SBIW R24 , 1
000351 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000352 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
000353 932a      	ST   -Y,R18
000354 85ad      	LDD  R26,Y+13
000355 85be      	LDD  R27,Y+13+1
000356 85ef      	LDD  R30,Y+15
000357 89f8      	LDD  R31,Y+15+1
000358 9509      	ICALL
000359 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
00035a 89e8      	LDD  R30,Y+16
00035b 89f9      	LDD  R31,Y+16+1
00035c 9734      	SBIW R30,4
00035d 8be8      	STD  Y+16,R30
00035e 8bf9      	STD  Y+16+1,R31
00035f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000360 85ad      	LDD  R26,Y+13
000361 85be      	LDD  R27,Y+13+1
000362 85ef      	LDD  R30,Y+15
000363 89f8      	LDD  R31,Y+15+1
000364 9509      	ICALL
000365 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
000366 89a8      	LDD  R26,Y+16
000367 89b9      	LDD  R27,Y+16+1
000368 9614      	ADIW R26,4
000369 940e 0396 	CALL __GETW1P
00036b 83ee      	STD  Y+6,R30
00036c 83ff      	STD  Y+6+1,R31
00036d 81ae      	LDD  R26,Y+6
00036e 81bf      	LDD  R27,Y+6+1
00036f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000370 89a8      	LDD  R26,Y+16
000371 89b9      	LDD  R27,Y+16+1
000372 9614      	ADIW R26,4
000373 940e 0396 	CALL __GETW1P
000375 87ea      	STD  Y+10,R30
000376 87fb      	STD  Y+10+1,R31
000377 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000378 01de      	MOVW R26,R28
000379 961c      	ADIW R26,12
00037a 940e 0389 	CALL __ADDW2R15
00037c 940e 0396 	CALL __GETW1P
00037e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00037f 9610      	adiw r26,0
000380 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000381 ed80     +LDI R24 , LOW ( 0x7D0 )
000382 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000383 9701     +SBIW R24 , 1
000384 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000385 95a8      	wdr
000386 9711      	sbiw r26,1
000387 f7c9      	brne __delay_ms0
                 __delay_ms1:
000388 9508      	ret
                 
                 __ADDW2R15:
000389 2400      	CLR  R0
00038a 0daf      	ADD  R26,R15
00038b 1db0      	ADC  R27,R0
00038c 9508      	RET
                 
                 __ANEGW1:
00038d 95f1      	NEG  R31
00038e 95e1      	NEG  R30
00038f 40f0      	SBCI R31,0
000390 9508      	RET
                 
                 __CWD1:
000391 2f6f      	MOV  R22,R31
000392 0f66      	ADD  R22,R22
000393 0b66      	SBC  R22,R22
000394 2f76      	MOV  R23,R22
000395 9508      	RET
                 
                 __GETW1P:
000396 91ed      	LD   R30,X+
000397 91fc      	LD   R31,X
000398 9711      	SBIW R26,1
000399 9508      	RET
                 
                 __GETW1PF:
00039a 9005      	LPM  R0,Z+
00039b 91f4      	LPM  R31,Z
00039c 2de0      	MOV  R30,R0
00039d 9508      	RET
                 
                 __PUTPARD1:
00039e 937a      	ST   -Y,R23
00039f 936a      	ST   -Y,R22
0003a0 93fa      	ST   -Y,R31
0003a1 93ea      	ST   -Y,R30
0003a2 9508      	RET
                 
                 __SAVELOCR6:
0003a3 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003a4 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003a5 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003a6 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003a7 931a      	ST   -Y,R17
0003a8 930a      	ST   -Y,R16
0003a9 9508      	RET
                 
                 __LOADLOCR6:
0003aa 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003ab 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003ac 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003ad 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003ae 8119      	LDD  R17,Y+1
0003af 8108      	LD   R16,Y
0003b0 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   2 r5 :   0 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  24 r25:   5 r26: 101 r27:  43 r28:  14 r29:   1 r30: 173 r31:  60 
x  :  23 y  : 169 z  :  15 
Registers used: 26 out of 35 (74.3%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  24 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  21 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  32 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  52 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :  35 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   5 inc   :   2 jmp   :  37 ld    :  28 ldd   :  77 
ldi   : 104 lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  18 
movw  :  16 mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   0 ori   :   6 out   :  15 pop   :   1 push  :   1 rcall :  18 
ret   :  26 reti  :   0 rjmp  :  67 rol   :   0 ror   :   0 sbc   :   3 
sbci  :   2 sbi   :  13 sbic  :   1 sbis  :   0 sbiw  :  19 sbr   :   0 
sbrc  :   2 sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  59 std   :  31 sts   :   3 sub   :   2 subi  :  18 
swap  :   1 tst   :   4 wdr   :   1 
Instructions used: 52 out of 117 (44.4%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000762   1832     58   1890  131072   1.4%
[.dseg] 0x000100 0x000518      0     24     24    4096   0.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 8 warnings
