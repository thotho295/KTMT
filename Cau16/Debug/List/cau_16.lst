
AVRASM ver. 2.1.30  E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm Fri Jan 14 10:18:36 2022

E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm(1090): warning: Register r4 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm(1091): warning: Register r5 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm(1092): warning: Register r6 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm(1093): warning: Register r7 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm(1094): warning: Register r9 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm(1095): warning: Register r8 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm(1096): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _count_msb=R5
                 	.DEF _RC=R6
                 	.DEF _RC_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0060 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0090 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _0x0:
000046 4352
000047 003a
000048 7254
000049 696f      	.DB  0x52,0x43,0x3A,0x0,0x54,0x72,0x6F,0x69
00004a 6e20
00004b 6e61
00004c 0067
00004d 7254      	.DB  0x20,0x6E,0x61,0x6E,0x67,0x0,0x54,0x72
00004e 696f
00004f 6d20
000050 6175
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm(1144): warning: .cseg .db misalignment - padding zero byte
000051 0000      	.DB  0x6F,0x69,0x20,0x6D,0x75,0x61,0x0
                 _0x2000003:
000052 c080      	.DB  0x80,0xC0
                 _0x2020060:
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm(1148): warning: .cseg .db misalignment - padding zero byte
000053 0001      	.DB  0x1
                 _0x2020000:
000054 4e2d
000055 4e41
000056 4900
000057 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_16\Debug\List\cau_16.asm(1151): warning: .cseg .db misalignment - padding zero byte
000058 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000059 0002      	.DW  0x02
00005a 0510      	.DW  __base_y_G100
00005b 00a4      	.DW  _0x2000003*2
                 
00005c 0001      	.DW  0x01
00005d 0514      	.DW  __seed_G101
00005e 00a6      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00005f 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000060 94f8      	CLI
000061 27ee      	CLR  R30
000062 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000063 e0f1      	LDI  R31,1
000064 bff5      	OUT  MCUCR,R31
000065 bfe5      	OUT  MCUCR,R30
000066 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000068 e08d      	LDI  R24,(14-2)+1
000069 e0a2      	LDI  R26,2
00006a 27bb      	CLR  R27
                 __CLEAR_REG:
00006b 93ed      	ST   X+,R30
00006c 958a      	DEC  R24
00006d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006f e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000070 e0a0      	LDI  R26,LOW(__SRAM_START)
000071 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000072 93ed      	ST   X+,R30
000073 9701      	SBIW R24,1
000074 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000075 ebe2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000076 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000077 9185      	LPM  R24,Z+
000078 9195      	LPM  R25,Z+
000079 9700      	SBIW R24,0
00007a f061      	BREQ __GLOBAL_INI_END
00007b 91a5      	LPM  R26,Z+
00007c 91b5      	LPM  R27,Z+
00007d 9005      	LPM  R0,Z+
00007e 9015      	LPM  R1,Z+
00007f 01bf      	MOVW R22,R30
000080 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000081 9005      	LPM  R0,Z+
000082 920d      	ST   X+,R0
000083 9701      	SBIW R24,1
000084 f7e1      	BRNE __GLOBAL_INI_LOOP
000085 01fb      	MOVW R30,R22
000086 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000087 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000088 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000089 bfed      	OUT  SPL,R30
00008a e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00008b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00008c e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008d e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008e 940c 00c1 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * cau_16.c
                 ; *
                 ; * Created: 12/19/2021 23:45:23
                 ; * Author: gold_
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define BT1     PINB.2
                 ;#define BT2     PINB.3
                 ;#define servo   PORTC.7
                 ;#define RC_MAX  166
                 ;#define RC_MIN  84
                 ;
                 ;
                 ;int count, RC;
                 ;char buffer[16];
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0018 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000090 93ea      	ST   -Y,R30
000091 93fa      	ST   -Y,R31
000092 b7ef      	IN   R30,SREG
000093 93ea      	ST   -Y,R30
                 ; 0000 0019 // Reinitialize Timer 0 value
                 ; 0000 001A     TCNT0=0xB0;
000094 ebe0      	LDI  R30,LOW(176)
000095 bfe2      	OUT  0x32,R30
                 ; 0000 001B 
                 ; 0000 001C     count++;
000096 01f2      	MOVW R30,R4
000097 9631      	ADIW R30,1
000098 012f      	MOVW R4,R30
                 ; 0000 001D     if(count == 2000) {
000099 ede0      	LDI  R30,LOW(2000)
00009a e0f7      	LDI  R31,HIGH(2000)
00009b 15e4      	CP   R30,R4
00009c 05f5      	CPC  R31,R5
00009d f411      	BRNE _0x3
                 ; 0000 001E         count = 0;
00009e 2444      	CLR  R4
00009f 2455      	CLR  R5
                 ; 0000 001F     }
                 ; 0000 0020 
                 ; 0000 0021     if(count < RC) {
                 _0x3:
                +
0000a0 1446     +CP R4 , R6
0000a1 0457     +CPC R5 , R7
                 	__CPWRR 4,5,6,7
0000a2 f414      	BRGE _0x4
                 ; 0000 0022         servo = 1;
0000a3 9aaf      	SBI  0x15,7
                 ; 0000 0023     } else {
0000a4 c001      	RJMP _0x7
                 _0x4:
                 ; 0000 0024         servo = 0;
0000a5 98af      	CBI  0x15,7
                 ; 0000 0025     }
                 _0x7:
                 ; 0000 0026 }
0000a6 91e9      	LD   R30,Y+
0000a7 bfef      	OUT  SREG,R30
0000a8 91f9      	LD   R31,Y+
0000a9 91e9      	LD   R30,Y+
0000aa 9518      	RETI
                 ; .FEND
                 ;
                 ;void update_speed() {
                 ; 0000 0028 void update_speed() {
                 _update_speed:
                 ; .FSTART _update_speed
                 ; 0000 0029     lcd_clear();
0000ab d089      	RCALL _lcd_clear
                 ; 0000 002A     itoa(RC, buffer);
0000ac 927a      	ST   -Y,R7
0000ad 926a      	ST   -Y,R6
0000ae e0a0      	LDI  R26,LOW(_buffer)
0000af e0b5      	LDI  R27,HIGH(_buffer)
0000b0 940e 01a7 	CALL _itoa
                 ; 0000 002B     lcd_gotoxy(0, 0);
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 93ea      	ST   -Y,R30
0000b4 e0a0      	LDI  R26,LOW(0)
0000b5 d072      	RCALL _lcd_gotoxy
                 ; 0000 002C     lcd_putsf("RC:");
                +
0000b6 e8ac     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000b7 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000b8 d0ac      	RCALL _lcd_putsf
                 ; 0000 002D     lcd_gotoxy(3, 0);
0000b9 e0e3      	LDI  R30,LOW(3)
0000ba 93ea      	ST   -Y,R30
0000bb e0a0      	LDI  R26,LOW(0)
0000bc d06b      	RCALL _lcd_gotoxy
                 ; 0000 002E     lcd_puts(buffer);
0000bd e0a0      	LDI  R26,LOW(_buffer)
0000be e0b5      	LDI  R27,HIGH(_buffer)
0000bf d096      	RCALL _lcd_puts
                 ; 0000 002F }
0000c0 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0032 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0033     DDRC = 0xFF;
0000c1 efef      	LDI  R30,LOW(255)
0000c2 bbe4      	OUT  0x14,R30
                 ; 0000 0034     DDRB = 0x00;
0000c3 e0e0      	LDI  R30,LOW(0)
0000c4 bbe7      	OUT  0x17,R30
                 ; 0000 0035     PORTB = 0xFF;
0000c5 efef      	LDI  R30,LOW(255)
0000c6 bbe8      	OUT  0x18,R30
                 ; 0000 0036 
                 ; 0000 0037     ASSR=0<<AS0;
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 bfe0      	OUT  0x30,R30
                 ; 0000 0038     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (1<<CS00);
0000c9 e0e1      	LDI  R30,LOW(1)
0000ca bfe3      	OUT  0x33,R30
                 ; 0000 0039     TCNT0=0xB0;
0000cb ebe0      	LDI  R30,LOW(176)
0000cc bfe2      	OUT  0x32,R30
                 ; 0000 003A     OCR0=0x00;
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bfe1      	OUT  0x31,R30
                 ; 0000 003B 
                 ; 0000 003C     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000cf e0e1      	LDI  R30,LOW(1)
0000d0 bfe7      	OUT  0x37,R30
                 ; 0000 003D     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
0000d1 e0e0      	LDI  R30,LOW(0)
0000d2 93e0 007d 	STS  125,R30
                 ; 0000 003E 
                 ; 0000 003F     #asm("sei")
0000d4 9478      	sei
                 ; 0000 0040 
                 ; 0000 0041     RC = 125;
0000d5 e7ed      	LDI  R30,LOW(125)
0000d6 e0f0      	LDI  R31,HIGH(125)
0000d7 013f      	MOVW R6,R30
                 ; 0000 0042 //    RC = 84;
                 ; 0000 0043 //    RC = 166;
                 ; 0000 0044 
                 ; 0000 0045     lcd_init(16);
0000d8 e1a0      	LDI  R26,LOW(16)
0000d9 d09e      	RCALL _lcd_init
                 ; 0000 0046 
                 ; 0000 0047     update_speed();
0000da dfd0      	RCALL _update_speed
                 ; 0000 0048 
                 ; 0000 0049     while(1)
                 _0xA:
                 ; 0000 004A     {
                 ; 0000 004B         if(BT1 == 0) {
0000db 99b2      	SBIC 0x16,2
0000dc c00b      	RJMP _0xD
                 ; 0000 004C             delay_ms(200);
0000dd eca8      	LDI  R26,LOW(200)
0000de e0b0      	LDI  R27,0
0000df 940e 01eb 	CALL _delay_ms
                 ; 0000 004D             RC = RC_MAX;
0000e1 eae6      	LDI  R30,LOW(166)
0000e2 e0f0      	LDI  R31,HIGH(166)
0000e3 940e 01d5 	CALL SUBOPT_0x0
                 ; 0000 004E             update_speed();
                 ; 0000 004F             lcd_gotoxy(0, 1);
                 ; 0000 0050             lcd_putsf("Troi nang");
                +
0000e5 e9a0     +LDI R26 , LOW ( 2 * _0x0 + ( 4 ) )
0000e6 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW2FN _0x0,4
0000e7 d07d      	RCALL _lcd_putsf
                 ; 0000 0051         }
                 ; 0000 0052 
                 ; 0000 0053         if(BT2 == 0) {
                 _0xD:
0000e8 99b3      	SBIC 0x16,3
0000e9 c00b      	RJMP _0xE
                 ; 0000 0054             delay_ms(200);
0000ea eca8      	LDI  R26,LOW(200)
0000eb e0b0      	LDI  R27,0
0000ec 940e 01eb 	CALL _delay_ms
                 ; 0000 0055             RC = RC_MIN;
0000ee e5e4      	LDI  R30,LOW(84)
0000ef e0f0      	LDI  R31,HIGH(84)
0000f0 940e 01d5 	CALL SUBOPT_0x0
                 ; 0000 0056             update_speed();
                 ; 0000 0057             lcd_gotoxy(0, 1);
                 ; 0000 0058             lcd_putsf("Troi mua");
                +
0000f2 e9aa     +LDI R26 , LOW ( 2 * _0x0 + ( 14 ) )
0000f3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW2FN _0x0,14
0000f4 d070      	RCALL _lcd_putsf
                 ; 0000 0059         }
                 ; 0000 005A     }
                 _0xE:
0000f5 cfe5      	RJMP _0xA
                 ; 0000 005B }
                 _0xF:
0000f6 cfff      	RJMP _0xF
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000f7 93aa      	ST   -Y,R26
0000f8 81e8      	LD   R30,Y
0000f9 71e0      	ANDI R30,LOW(0x10)
0000fa f011      	BREQ _0x2000004
0000fb 9adb      	SBI  0x1B,3
0000fc c001      	RJMP _0x2000005
                 _0x2000004:
0000fd 98db      	CBI  0x1B,3
                 _0x2000005:
0000fe 81e8      	LD   R30,Y
0000ff 72e0      	ANDI R30,LOW(0x20)
000100 f011      	BREQ _0x2000006
000101 9adc      	SBI  0x1B,4
000102 c001      	RJMP _0x2000007
                 _0x2000006:
000103 98dc      	CBI  0x1B,4
                 _0x2000007:
000104 81e8      	LD   R30,Y
000105 74e0      	ANDI R30,LOW(0x40)
000106 f011      	BREQ _0x2000008
000107 9add      	SBI  0x1B,5
000108 c001      	RJMP _0x2000009
                 _0x2000008:
000109 98dd      	CBI  0x1B,5
                 _0x2000009:
00010a 81e8      	LD   R30,Y
00010b 78e0      	ANDI R30,LOW(0x80)
00010c f011      	BREQ _0x200000A
00010d 9ade      	SBI  0x1B,6
00010e c001      	RJMP _0x200000B
                 _0x200000A:
00010f 98de      	CBI  0x1B,6
                 _0x200000B:
                +
000110 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000111 958a     +DEC R24
000112 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000113 9ada      	SBI  0x1B,2
                +
000114 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000115 958a     +DEC R24
000116 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000117 98da      	CBI  0x1B,2
                +
000118 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000119 958a     +DEC R24
00011a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00011b c089      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00011c 93aa      	ST   -Y,R26
00011d 81a8      	LD   R26,Y
00011e dfd8      	RCALL __lcd_write_nibble_G100
00011f 81e8          ld    r30,y
000120 95e2          swap  r30
000121 83e8          st    y,r30
000122 81a8      	LD   R26,Y
000123 dfd3      	RCALL __lcd_write_nibble_G100
                +
000124 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000125 958a     +DEC R24
000126 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000127 c07d      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000128 93aa      	ST   -Y,R26
000129 81e8      	LD   R30,Y
00012a e0f0      	LDI  R31,0
00012b 5fe0      	SUBI R30,LOW(-__base_y_G100)
00012c 4ffa      	SBCI R31,HIGH(-__base_y_G100)
00012d 81e0      	LD   R30,Z
00012e 81a9      	LDD  R26,Y+1
00012f 0fae      	ADD  R26,R30
000130 dfeb      	RCALL __lcd_write_data
000131 8099      	LDD  R9,Y+1
000132 8088      	LDD  R8,Y+0
000133 9622      	ADIW R28,2
000134 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000135 e0a2      	LDI  R26,LOW(2)
000136 940e 01dd 	CALL SUBOPT_0x1
000138 e0ac      	LDI  R26,LOW(12)
000139 dfe2      	RCALL __lcd_write_data
00013a e0a1      	LDI  R26,LOW(1)
00013b 940e 01dd 	CALL SUBOPT_0x1
00013d e0e0      	LDI  R30,LOW(0)
00013e 2e8e      	MOV  R8,R30
00013f 2e9e      	MOV  R9,R30
000140 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000141 93aa      	ST   -Y,R26
000142 81a8      	LD   R26,Y
000143 30aa      	CPI  R26,LOW(0xA)
000144 f011      	BREQ _0x2000011
000145 149b      	CP   R9,R11
000146 f048      	BRLO _0x2000010
                 _0x2000011:
000147 e0e0      	LDI  R30,LOW(0)
000148 93ea      	ST   -Y,R30
000149 9483      	INC  R8
00014a 2da8      	MOV  R26,R8
00014b dfdc      	RCALL _lcd_gotoxy
00014c 81a8      	LD   R26,Y
00014d 30aa      	CPI  R26,LOW(0xA)
00014e f409      	BRNE _0x2000013
00014f c055      	RJMP _0x20A0001
                 _0x2000013:
                 _0x2000010:
000150 9493      	INC  R9
000151 9ad8      	SBI  0x1B,0
000152 81a8      	LD   R26,Y
000153 dfc8      	RCALL __lcd_write_data
000154 98d8      	CBI  0x1B,0
000155 c04f      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000156 93ba      	ST   -Y,R27
000157 93aa      	ST   -Y,R26
000158 931a      	ST   -Y,R17
                 _0x2000014:
000159 81a9      	LDD  R26,Y+1
00015a 81ba      	LDD  R27,Y+1+1
00015b 91ed      	LD   R30,X+
00015c 83a9      	STD  Y+1,R26
00015d 83ba      	STD  Y+1+1,R27
00015e 2f1e      	MOV  R17,R30
00015f 30e0      	CPI  R30,0
000160 f019      	BREQ _0x2000016
000161 2fa1      	MOV  R26,R17
000162 dfde      	RCALL _lcd_putchar
000163 cff5      	RJMP _0x2000014
                 _0x2000016:
000164 c010      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000165 93ba      	ST   -Y,R27
000166 93aa      	ST   -Y,R26
000167 931a      	ST   -Y,R17
                 _0x2000017:
000168 81e9      	LDD  R30,Y+1
000169 81fa      	LDD  R31,Y+1+1
00016a 9631      	ADIW R30,1
00016b 83e9      	STD  Y+1,R30
00016c 83fa      	STD  Y+1+1,R31
00016d 9731      	SBIW R30,1
00016e 91e4      	LPM  R30,Z
00016f 2f1e      	MOV  R17,R30
000170 30e0      	CPI  R30,0
000171 f019      	BREQ _0x2000019
000172 2fa1      	MOV  R26,R17
000173 dfcd      	RCALL _lcd_putchar
000174 cff3      	RJMP _0x2000017
                 _0x2000019:
                 _0x20A0002:
000175 8118      	LDD  R17,Y+0
000176 9623      	ADIW R28,3
000177 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000178 93aa      	ST   -Y,R26
000179 9ad3      	SBI  0x1A,3
00017a 9ad4      	SBI  0x1A,4
00017b 9ad5      	SBI  0x1A,5
00017c 9ad6      	SBI  0x1A,6
00017d 9ad2      	SBI  0x1A,2
00017e 9ad0      	SBI  0x1A,0
00017f 9ad1      	SBI  0x1A,1
000180 98da      	CBI  0x1B,2
000181 98d8      	CBI  0x1B,0
000182 98d9      	CBI  0x1B,1
000183 80b8      	LDD  R11,Y+0
000184 81e8      	LD   R30,Y
000185 58e0      	SUBI R30,-LOW(128)
                +
000186 93e0 0512+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000188 81e8      	LD   R30,Y
000189 54e0      	SUBI R30,-LOW(192)
                +
00018a 93e0 0513+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00018c e1a4      	LDI  R26,LOW(20)
00018d e0b0      	LDI  R27,0
00018e 940e 01eb 	CALL _delay_ms
000190 940e 01e3 	CALL SUBOPT_0x2
000192 940e 01e3 	CALL SUBOPT_0x2
000194 940e 01e3 	CALL SUBOPT_0x2
000196 e2a0      	LDI  R26,LOW(32)
000197 df5f      	RCALL __lcd_write_nibble_G100
                +
000198 ec88     +LDI R24 , LOW ( 200 )
000199 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00019a 9701     +SBIW R24 , 1
00019b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00019c e2a8      	LDI  R26,LOW(40)
00019d df7e      	RCALL __lcd_write_data
00019e e0a4      	LDI  R26,LOW(4)
00019f df7c      	RCALL __lcd_write_data
0001a0 e8a5      	LDI  R26,LOW(133)
0001a1 df7a      	RCALL __lcd_write_data
0001a2 e0a6      	LDI  R26,LOW(6)
0001a3 df78      	RCALL __lcd_write_data
0001a4 df90      	RCALL _lcd_clear
                 _0x20A0001:
0001a5 9621      	ADIW R28,1
0001a6 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0001a7 93ba      	ST   -Y,R27
0001a8 93aa      	ST   -Y,R26
0001a9 91a9          ld   r26,y+
0001aa 91b9          ld   r27,y+
0001ab 91e9          ld   r30,y+
0001ac 91f9          ld   r31,y+
0001ad 9630          adiw r30,0
0001ae f42a          brpl __itoa0
0001af 95e0          com  r30
0001b0 95f0          com  r31
0001b1 9631          adiw r30,1
0001b2 e26d          ldi  r22,'-'
0001b3 936d          st   x+,r22
                 __itoa0:
0001b4 94e8          clt
0001b5 e180          ldi  r24,low(10000)
0001b6 e297          ldi  r25,high(10000)
0001b7 d00d          rcall __itoa1
0001b8 ee88          ldi  r24,low(1000)
0001b9 e093          ldi  r25,high(1000)
0001ba d00a          rcall __itoa1
0001bb e684          ldi  r24,100
0001bc 2799          clr  r25
0001bd d007          rcall __itoa1
0001be e08a          ldi  r24,10
0001bf d005          rcall __itoa1
0001c0 2f6e          mov  r22,r30
0001c1 d010          rcall __itoa5
0001c2 2766          clr  r22
0001c3 936c          st   x,r22
0001c4 9508          ret
                 
                 __itoa1:
0001c5 2766          clr	 r22
                 __itoa2:
0001c6 17e8          cp   r30,r24
0001c7 07f9          cpc  r31,r25
0001c8 f020          brlo __itoa3
0001c9 9563          inc  r22
0001ca 1be8          sub  r30,r24
0001cb 0bf9          sbc  r31,r25
0001cc f7c9          brne __itoa2
                 __itoa3:
0001cd 2366          tst  r22
0001ce f411          brne __itoa4
0001cf f016          brts __itoa5
0001d0 9508          ret
                 __itoa4:
0001d1 9468          set
                 __itoa5:
0001d2 5d60          subi r22,-0x30
0001d3 936d          st   x+,r22
0001d4 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _buffer:
000500           	.BYTE 0x10
                 __base_y_G100:
000510           	.BYTE 0x4
                 __seed_G101:
000514           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0001d5 013f      	MOVW R6,R30
0001d6 940e 00ab 	CALL _update_speed
0001d8 e0e0      	LDI  R30,LOW(0)
0001d9 93ea      	ST   -Y,R30
0001da e0a1      	LDI  R26,LOW(1)
0001db 940c 0128 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001dd 940e 011c 	CALL __lcd_write_data
0001df e0a3      	LDI  R26,LOW(3)
0001e0 e0b0      	LDI  R27,0
0001e1 940c 01eb 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0001e3 e3a0      	LDI  R26,LOW(48)
0001e4 940e 00f7 	CALL __lcd_write_nibble_G100
                +
0001e6 ec88     +LDI R24 , LOW ( 200 )
0001e7 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001e8 9701     +SBIW R24 , 1
0001e9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001ea 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001eb 9610      	adiw r26,0
0001ec f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001ed ed80     +LDI R24 , LOW ( 0x7D0 )
0001ee e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001ef 9701     +SBIW R24 , 1
0001f0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001f1 95a8      	wdr
0001f2 9711      	sbiw r26,1
0001f3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001f4 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   5 r5 :   3 r6 :   4 r7 :   2 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   7 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  28 r25:  10 r26:  50 r27:  18 r28:   4 r29:   1 r30:  99 r31:  18 
x  :   7 y  :  56 z  :   9 
Registers used: 22 out of 35 (62.9%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   8 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   9 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  15 brpl  :   1 brsh  :   0 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  14 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   4 cpc   :   3 cpi   :   4 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   3 jmp   :  38 ld    :  22 ldd   :   9 
ldi   :  85 lds   :   0 lpm   :   9 lsl   :   0 lsr   :   0 mov   :   8 
movw  :   7 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :  16 pop   :   0 push  :   0 rcall :  28 
ret   :  10 reti  :   1 rjmp  :  17 rol   :   0 ror   :   0 sbc   :   1 
sbci  :   1 sbi   :  14 sbic  :   2 sbis  :   0 sbiw  :   8 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  29 std   :   4 sts   :   4 sub   :   1 subi  :   4 
swap  :   1 tst   :   1 wdr   :   1 
Instructions used: 48 out of 117 (41.0%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003ea    950     52   1002  131072   0.8%
[.dseg] 0x000100 0x000518      0     24     24    4096   0.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 10 warnings
