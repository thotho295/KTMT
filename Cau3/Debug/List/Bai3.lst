
AVRASM ver. 2.1.30  D:\KienTrucMayTinh\KTGK\Bai3\Debug\List\Bai3.asm Mon Nov 08 10:05:57 2021

D:\KienTrucMayTinh\KTGK\Bai3\Debug\List\Bai3.asm(1090): warning: Register r4 already defined by the .DEF directive
D:\KienTrucMayTinh\KTGK\Bai3\Debug\List\Bai3.asm(1091): warning: Register r5 already defined by the .DEF directive
D:\KienTrucMayTinh\KTGK\Bai3\Debug\List\Bai3.asm(1092): warning: Register r6 already defined by the .DEF directive
D:\KienTrucMayTinh\KTGK\Bai3\Debug\List\Bai3.asm(1093): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _count_msb=R5
                 	.DEF _r=R6
                 	.DEF _r_msb=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 007c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 00ac 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000
000047 044c      	.DB  0x0,0x0,0x4C,0x4
                 
                 _0x3:
000048 393f
000049 3b3b
00004a 1f3d
00004b 3b1d      	.DB  0x3F,0x39,0x3B,0x3B,0x3D,0x1F,0x1D,0x3B
00004c 3f3f      	.DB  0x3F,0x3F
                 _0x4:
00004d 696f
00004e 6b6b
00004f 4f6d
000050 6b4d      	.DB  0x6F,0x69,0x6B,0x6B,0x6D,0x4F,0x4D,0x6B
000051 6f6f      	.DB  0x6F,0x6F
                 _0x5:
000052 f1f7
000053 f3f3
000054 d7f5
000055 f3d5      	.DB  0xF7,0xF1,0xF3,0xF3,0xF5,0xD7,0xD5,0xF3
000056 f7f7      	.DB  0xF7,0xF7
                 _0x6:
000057 787e
000058 7a7a
000059 5e7c
00005a 7a5c      	.DB  0x7E,0x78,0x7A,0x7A,0x7C,0x5E,0x5C,0x7A
00005b 7e7e      	.DB  0x7E,0x7E
                 _0x7:
00005c 0006
00005d 0a0e
00005e 0a08
00005f 000e      	.DB  0x6,0x0,0xE,0xA,0x8,0xA,0xE,0x0
000060 0a0e      	.DB  0xE,0xA
                 _0x8:
000061 8080
000062 8000
000063 8080
000064 8080      	.DB  0x80,0x80,0x0,0x80,0x80,0x80,0x80,0x80
000065 8080      	.DB  0x80,0x80
                 
                 __GLOBAL_INI_TBL:
000066 0004      	.DW  0x04
000067 0004      	.DW  0x04
000068 008c      	.DW  __REG_VARS*2
                 
000069 000a      	.DW  0x0A
00006a 0500      	.DW  _LED4
00006b 0090      	.DW  _0x3*2
                 
00006c 000a      	.DW  0x0A
00006d 050a      	.DW  _LED3
00006e 009a      	.DW  _0x4*2
                 
00006f 000a      	.DW  0x0A
000070 0514      	.DW  _LED2
000071 00a4      	.DW  _0x5*2
                 
000072 000a      	.DW  0x0A
000073 051e      	.DW  _LED1
000074 00ae      	.DW  _0x6*2
                 
000075 000a      	.DW  0x0A
000076 0528      	.DW  _LEDD
000077 00b8      	.DW  _0x7*2
                 
000078 000a      	.DW  0x0A
000079 0532      	.DW  _LEDA
00007a 00c2      	.DW  _0x8*2
                 
                 _0xFFFFFFFF:
00007b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00007c 94f8      	CLI
00007d 27ee      	CLR  R30
00007e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00007f e0f1      	LDI  R31,1
000080 bff5      	OUT  MCUCR,R31
000081 bfe5      	OUT  MCUCR,R30
000082 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000084 e08d      	LDI  R24,(14-2)+1
000085 e0a2      	LDI  R26,2
000086 27bb      	CLR  R27
                 __CLEAR_REG:
000087 93ed      	ST   X+,R30
000088 958a      	DEC  R24
000089 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00008a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008b e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00008c e0a0      	LDI  R26,LOW(__SRAM_START)
00008d e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00008e 93ed      	ST   X+,R30
00008f 9701      	SBIW R24,1
000090 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000091 ecec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000092 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000093 9185      	LPM  R24,Z+
000094 9195      	LPM  R25,Z+
000095 9700      	SBIW R24,0
000096 f061      	BREQ __GLOBAL_INI_END
000097 91a5      	LPM  R26,Z+
000098 91b5      	LPM  R27,Z+
000099 9005      	LPM  R0,Z+
00009a 9015      	LPM  R1,Z+
00009b 01bf      	MOVW R22,R30
00009c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00009d 9005      	LPM  R0,Z+
00009e 920d      	ST   X+,R0
00009f 9701      	SBIW R24,1
0000a0 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a1 01fb      	MOVW R30,R22
0000a2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
0000a3 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a4 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a5 bfed      	OUT  SPL,R30
0000a6 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a8 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a9 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000aa 940c 0141 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * Bai3.c
                 ; *      Viet c.t hien thi cac so tu 11,00 den 99,99 cac so sau dau , thay doi theo chu ky 0.1s
                 ; * Created: 11/8/2021 9:50:14 AM
                 ; * Author: nguyen thu thao
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;unsigned char LED4[10] = {0x3F,0x39,0x3B,0x3B,0x3D,0x1F,0x1D,0x3B,0x3F,0x3F};
                 
                 	.DSEG
                 ;unsigned char LED3[10] = {0x6F,0x69,0x6B,0x6B,0x6D,0x4F,0x4D,0x6B,0x6F,0x6F};
                 ;unsigned char LED2[10] = {0xF7,0xF1,0xF3,0xF3,0xF5,0xD7,0xD5,0xF3,0xF7,0xF7};
                 ;unsigned char LED1[10] = {0x7E,0x78,0x7A,0x7A,0x7C,0x5E,0x5C,0x7A,0x7E,0x7E};
                 ;unsigned char LEDD[10] = {0x06,0x00,0x0E,0x0A,0x08,0x0A,0x0E,0x00,0x0E,0x0A};
                 ;unsigned char LEDA[10] = {0x80,0x80,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0x80};
                 ;//unsigned char LEDF[10] = {0x26,0x20,0x22,0x22,0x24,0x06,0x04,0x22,0x26,0x26};
                 ;int count=0;
                 ;int r=1100;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000ac 93ea      	ST   -Y,R30
0000ad 93fa      	ST   -Y,R31
0000ae b7ef      	IN   R30,SREG
0000af 93ea      	ST   -Y,R30
                 ; 0000 0016     TCNT0=0x06;
0000b0 e0e6      	LDI  R30,LOW(6)
0000b1 bfe2      	OUT  0x32,R30
                 ; 0000 0017     count++;
0000b2 01f2      	MOVW R30,R4
0000b3 9631      	ADIW R30,1
0000b4 012f      	MOVW R4,R30
                 ; 0000 0018 
                 ; 0000 0019 }
0000b5 91e9      	LD   R30,Y+
0000b6 bfef      	OUT  SREG,R30
0000b7 91f9      	LD   R31,Y+
0000b8 91e9      	LD   R30,Y+
0000b9 9518      	RETI
                 ; .FEND
                 ;void hienthi(int x){
                 ; 0000 001A void hienthi(int x){
                 _hienthi:
                 ; .FSTART _hienthi
                 ; 0000 001B     int tmp,ch,dv,pch,ptr,i;
                 ; 0000 001C     tmp = x;
0000ba 93ba      	ST   -Y,R27
0000bb 93aa      	ST   -Y,R26
0000bc 9726      	SBIW R28,6
0000bd 940e 01b0 	CALL __SAVELOCR6
                 ;	x -> Y+12
                 ;	tmp -> R16,R17
                 ;	ch -> R18,R19
                 ;	dv -> R20,R21
                 ;	pch -> Y+10
                 ;	ptr -> Y+8
                 ;	i -> Y+6
                +
0000bf 850c     +LDD R16 , Y + 12
0000c0 851d     +LDD R17 , Y + 12 + 1
                 	__GETWRS 16,17,12
                 ; 0000 001D     ch = tmp/1000;
0000c1 01d8      	MOVW R26,R16
0000c2 eee8      	LDI  R30,LOW(1000)
0000c3 e0f3      	LDI  R31,HIGH(1000)
0000c4 940e 018f 	CALL __DIVW21
0000c6 019f      	MOVW R18,R30
                 ; 0000 001E     dv = (tmp%1000)/100;
0000c7 d0a2      	RCALL SUBOPT_0x0
0000c8 940e 018f 	CALL __DIVW21
0000ca 01af      	MOVW R20,R30
                 ; 0000 001F     pch = ((tmp%1000)%100)/10;
0000cb d09e      	RCALL SUBOPT_0x0
0000cc 940e 0194 	CALL __MODW21
0000ce 01df      	MOVW R26,R30
0000cf e0ea      	LDI  R30,LOW(10)
0000d0 e0f0      	LDI  R31,HIGH(10)
0000d1 940e 018f 	CALL __DIVW21
0000d3 87ea      	STD  Y+10,R30
0000d4 87fb      	STD  Y+10+1,R31
                 ; 0000 0020     ptr = ((tmp%1000)%100)%10;
0000d5 d094      	RCALL SUBOPT_0x0
0000d6 940e 0194 	CALL __MODW21
0000d8 01df      	MOVW R26,R30
0000d9 e0ea      	LDI  R30,LOW(10)
0000da e0f0      	LDI  R31,HIGH(10)
0000db 940e 0194 	CALL __MODW21
0000dd 87e8      	STD  Y+8,R30
0000de 87f9      	STD  Y+8+1,R31
                 ; 0000 0021 
                 ; 0000 0022     for(i=0;i<3;i++){
0000df e0e0      	LDI  R30,LOW(0)
0000e0 83ee      	STD  Y+6,R30
0000e1 83ef      	STD  Y+6+1,R30
                 _0xA:
0000e2 81ae      	LDD  R26,Y+6
0000e3 81bf      	LDD  R27,Y+6+1
0000e4 9713      	SBIW R26,3
0000e5 f00c      	BRLT PC+2
0000e6 c056      	RJMP _0xB
                 ; 0000 0023         //PORTF = 0b10100110;
                 ; 0000 0024         PORTF = LED1[ch];
0000e7 e1ae      	LDI  R26,LOW(_LED1)
0000e8 e0b5      	LDI  R27,HIGH(_LED1)
0000e9 0fa2      	ADD  R26,R18
0000ea 1fb3      	ADC  R27,R19
0000eb 91ec      	LD   R30,X
0000ec 93e0 0062 	STS  98,R30
                 ; 0000 0025         PORTD = LEDD[ch];
0000ee e2a8      	LDI  R26,LOW(_LEDD)
0000ef e0b5      	LDI  R27,HIGH(_LEDD)
0000f0 0fa2      	ADD  R26,R18
0000f1 1fb3      	ADC  R27,R19
0000f2 91ec      	LD   R30,X
0000f3 bbe2      	OUT  0x12,R30
                 ; 0000 0026         PORTA = LEDA[ch];
0000f4 e3a2      	LDI  R26,LOW(_LEDA)
0000f5 e0b5      	LDI  R27,HIGH(_LEDA)
0000f6 0fa2      	ADD  R26,R18
0000f7 1fb3      	ADC  R27,R19
0000f8 91ec      	LD   R30,X
0000f9 d079      	RCALL SUBOPT_0x1
                 ; 0000 0027         delay_us(10);
                 ; 0000 0028 
                 ; 0000 0029         PORTF = LED2[dv];
0000fa e1a4      	LDI  R26,LOW(_LED2)
0000fb e0b5      	LDI  R27,HIGH(_LED2)
0000fc 0fa4      	ADD  R26,R20
0000fd 1fb5      	ADC  R27,R21
0000fe 91ec      	LD   R30,X
0000ff 93e0 0062 	STS  98,R30
                 ; 0000 002A         PORTD = LEDD[dv];
000101 e2a8      	LDI  R26,LOW(_LEDD)
000102 e0b5      	LDI  R27,HIGH(_LEDD)
000103 0fa4      	ADD  R26,R20
000104 1fb5      	ADC  R27,R21
000105 91ec      	LD   R30,X
000106 bbe2      	OUT  0x12,R30
                 ; 0000 002B         PORTA = LEDA[dv];
000107 e3a2      	LDI  R26,LOW(_LEDA)
000108 e0b5      	LDI  R27,HIGH(_LEDA)
000109 0fa4      	ADD  R26,R20
00010a 1fb5      	ADC  R27,R21
00010b 91ec      	LD   R30,X
00010c d066      	RCALL SUBOPT_0x1
                 ; 0000 002C         delay_us(10);
                 ; 0000 002D 
                 ; 0000 002E         PORTF = LED3[pch];
00010d 85ea      	LDD  R30,Y+10
00010e 85fb      	LDD  R31,Y+10+1
00010f 5fe6      	SUBI R30,LOW(-_LED3)
000110 4ffa      	SBCI R31,HIGH(-_LED3)
000111 81e0      	LD   R30,Z
000112 93e0 0062 	STS  98,R30
                 ; 0000 002F         PORTD = LEDD[pch];
000114 85ea      	LDD  R30,Y+10
000115 85fb      	LDD  R31,Y+10+1
000116 5de8      	SUBI R30,LOW(-_LEDD)
000117 4ffa      	SBCI R31,HIGH(-_LEDD)
000118 81e0      	LD   R30,Z
000119 bbe2      	OUT  0x12,R30
                 ; 0000 0030         PORTA = LEDA[pch];
00011a 85ea      	LDD  R30,Y+10
00011b 85fb      	LDD  R31,Y+10+1
00011c 5cee      	SUBI R30,LOW(-_LEDA)
00011d 4ffa      	SBCI R31,HIGH(-_LEDA)
00011e 81e0      	LD   R30,Z
00011f d053      	RCALL SUBOPT_0x1
                 ; 0000 0031         delay_us(10);
                 ; 0000 0032 
                 ; 0000 0033         PORTF = LED4[ptr];
000120 85e8      	LDD  R30,Y+8
000121 85f9      	LDD  R31,Y+8+1
000122 50e0      	SUBI R30,LOW(-_LED4)
000123 4ffb      	SBCI R31,HIGH(-_LED4)
000124 81e0      	LD   R30,Z
000125 93e0 0062 	STS  98,R30
                 ; 0000 0034         PORTD = LEDD[ptr];
000127 85e8      	LDD  R30,Y+8
000128 85f9      	LDD  R31,Y+8+1
000129 5de8      	SUBI R30,LOW(-_LEDD)
00012a 4ffa      	SBCI R31,HIGH(-_LEDD)
00012b 81e0      	LD   R30,Z
00012c bbe2      	OUT  0x12,R30
                 ; 0000 0035         PORTA = LEDA[ptr];
00012d 85e8      	LDD  R30,Y+8
00012e 85f9      	LDD  R31,Y+8+1
00012f 5cee      	SUBI R30,LOW(-_LEDA)
000130 4ffa      	SBCI R31,HIGH(-_LEDA)
000131 81e0      	LD   R30,Z
000132 bbeb      	OUT  0x1B,R30
                 ; 0000 0036         delay_us(100);
                +
000133 ec88     +LDI R24 , LOW ( 200 )
000134 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000135 9701     +SBIW R24 , 1
000136 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
                 ; 0000 0037     }
000137 81ee      	LDD  R30,Y+6
000138 81ff      	LDD  R31,Y+6+1
000139 9631      	ADIW R30,1
00013a 83ee      	STD  Y+6,R30
00013b 83ff      	STD  Y+6+1,R31
00013c cfa5      	RJMP _0xA
                 _0xB:
                 ; 0000 0038 }
00013d 940e 01b7 	CALL __LOADLOCR6
00013f 962e      	ADIW R28,14
000140 9508      	RET
                 ; .FEND
                 ;void main(void){
                 ; 0000 0039 void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 003A     DDRF = 0xFF;
000141 efef      	LDI  R30,LOW(255)
000142 93e0 0061 	STS  97,R30
                 ; 0000 003B     DDRD = 0xFF;
000144 bbe1      	OUT  0x11,R30
                 ; 0000 003C     DDRA = 0xFF;
000145 bbea      	OUT  0x1A,R30
                 ; 0000 003D         ASSR=0<<AS0;
000146 e0e0      	LDI  R30,LOW(0)
000147 bfe0      	OUT  0x30,R30
                 ; 0000 003E     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
000148 e0e3      	LDI  R30,LOW(3)
000149 bfe3      	OUT  0x33,R30
                 ; 0000 003F     TCNT0=0x06;
00014a e0e6      	LDI  R30,LOW(6)
00014b bfe2      	OUT  0x32,R30
                 ; 0000 0040     OCR0=0x00;
00014c e0e0      	LDI  R30,LOW(0)
00014d bfe1      	OUT  0x31,R30
                 ; 0000 0041 
                 ; 0000 0042     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0043     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
00014e e0e1      	LDI  R30,LOW(1)
00014f bfe7      	OUT  0x37,R30
                 ; 0000 0044     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000150 e0e0      	LDI  R30,LOW(0)
000151 93e0 007d 	STS  125,R30
                 ; 0000 0045 
                 ; 0000 0046 
                 ; 0000 0047     // Global enable interrupts
                 ; 0000 0048     #asm("sei")
000153 9478      	sei
                 ; 0000 0049     while (1)
                 _0xC:
                 ; 0000 004A         {
                 ; 0000 004B             hienthi(r);
000154 01d3      	MOVW R26,R6
000155 df64      	RCALL _hienthi
                 ; 0000 004C             if(count >= 100 && r<9999){
000156 e6e4      	LDI  R30,LOW(100)
000157 e0f0      	LDI  R31,HIGH(100)
000158 164e      	CP   R4,R30
000159 065f      	CPC  R5,R31
00015a f02c      	BRLT _0x10
00015b e0ef      	LDI  R30,LOW(9999)
00015c e2f7      	LDI  R31,HIGH(9999)
00015d 166e      	CP   R6,R30
00015e 067f      	CPC  R7,R31
00015f f00c      	BRLT _0x11
                 _0x10:
000160 c007      	RJMP _0xF
                 _0x11:
                 ; 0000 004D                 r++;
000161 01f3      	MOVW R30,R6
000162 9631      	ADIW R30,1
000163 013f      	MOVW R6,R30
                 ; 0000 004E                 hienthi(r);
000164 01d3      	MOVW R26,R6
000165 df54      	RCALL _hienthi
                 ; 0000 004F                 count=0;
000166 2444      	CLR  R4
000167 2455      	CLR  R5
                 ; 0000 0050             }
                 ; 0000 0051         }
                 _0xF:
000168 cfeb      	RJMP _0xC
                 ; 0000 0052 }
                 _0x12:
000169 cfff      	RJMP _0x12
                 ; .FEND
                 
                 	.DSEG
                 _LED4:
000500           	.BYTE 0xA
                 _LED3:
00050a           	.BYTE 0xA
                 _LED2:
000514           	.BYTE 0xA
                 _LED1:
00051e           	.BYTE 0xA
                 _LEDD:
000528           	.BYTE 0xA
                 _LEDA:
000532           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
00016a 01d8      	MOVW R26,R16
00016b eee8      	LDI  R30,LOW(1000)
00016c e0f3      	LDI  R31,HIGH(1000)
00016d 940e 0194 	CALL __MODW21
00016f 01df      	MOVW R26,R30
000170 e6e4      	LDI  R30,LOW(100)
000171 e0f0      	LDI  R31,HIGH(100)
000172 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000173 bbeb      	OUT  0x1B,R30
                +
000174 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000175 958a     +DEC R24
000176 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
000177 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
000178 95f1      	NEG  R31
000179 95e1      	NEG  R30
00017a 40f0      	SBCI R31,0
00017b 9508      	RET
                 
                 __DIVW21U:
00017c 2400      	CLR  R0
00017d 2411      	CLR  R1
00017e e190      	LDI  R25,16
                 __DIVW21U1:
00017f 0faa      	LSL  R26
000180 1fbb      	ROL  R27
000181 1c00      	ROL  R0
000182 1c11      	ROL  R1
000183 1a0e      	SUB  R0,R30
000184 0a1f      	SBC  R1,R31
000185 f418      	BRCC __DIVW21U2
000186 0e0e      	ADD  R0,R30
000187 1e1f      	ADC  R1,R31
000188 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000189 60a1      	SBR  R26,1
                 __DIVW21U3:
00018a 959a      	DEC  R25
00018b f799      	BRNE __DIVW21U1
00018c 01fd      	MOVW R30,R26
00018d 01d0      	MOVW R26,R0
00018e 9508      	RET
                 
                 __DIVW21:
00018f d012      	RCALL __CHKSIGNW
000190 dfeb      	RCALL __DIVW21U
000191 f40e      	BRTC __DIVW211
000192 dfe5      	RCALL __ANEGW1
                 __DIVW211:
000193 9508      	RET
                 
                 __MODW21:
000194 94e8      	CLT
000195 ffb7      	SBRS R27,7
000196 c004      	RJMP __MODW211
000197 95a0      	COM  R26
000198 95b0      	COM  R27
000199 9611      	ADIW R26,1
00019a 9468      	SET
                 __MODW211:
00019b fdf7      	SBRC R31,7
00019c dfdb      	RCALL __ANEGW1
00019d dfde      	RCALL __DIVW21U
00019e 01fd      	MOVW R30,R26
00019f f40e      	BRTC __MODW212
0001a0 dfd7      	RCALL __ANEGW1
                 __MODW212:
0001a1 9508      	RET
                 
                 __CHKSIGNW:
0001a2 94e8      	CLT
0001a3 fff7      	SBRS R31,7
0001a4 c002      	RJMP __CHKSW1
0001a5 dfd2      	RCALL __ANEGW1
0001a6 9468      	SET
                 __CHKSW1:
0001a7 ffb7      	SBRS R27,7
0001a8 c006      	RJMP __CHKSW2
0001a9 95a0      	COM  R26
0001aa 95b0      	COM  R27
0001ab 9611      	ADIW R26,1
0001ac f800      	BLD  R0,0
0001ad 9403      	INC  R0
0001ae fa00      	BST  R0,0
                 __CHKSW2:
0001af 9508      	RET
                 
                 __SAVELOCR6:
0001b0 935a      	ST   -Y,R21
                 __SAVELOCR5:
0001b1 934a      	ST   -Y,R20
                 __SAVELOCR4:
0001b2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001b3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001b4 931a      	ST   -Y,R17
0001b5 930a      	ST   -Y,R16
0001b6 9508      	RET
                 
                 __LOADLOCR6:
0001b7 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0001b8 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0001b9 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001ba 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001bb 8119      	LDD  R17,Y+1
0001bc 8108      	LD   R16,Y
0001bd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  12 r1 :   5 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   5 r7 :   1 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   5 r17:   3 r18:   6 r19:   5 r20:   6 r21:   5 r22:   2 r23:   0 
r24:  12 r25:   5 r26:  34 r27:  22 r28:   3 r29:   1 r30: 105 r31:  36 
x  :   9 y  :  46 z  :  13 
Registers used: 24 out of 35 (68.6%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   7 add   :   7 
adiw  :   6 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   3 brmi  :   0 brne  :   6 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   9 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   2 cpc   :   2 cpi   :   0 cpse  :   0 dec   :   3 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   1 jmp   :  36 ld    :  16 ldd   :  23 
ldi   :  52 lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   0 
movw  :  19 mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   0 ori   :   0 out   :  21 pop   :   0 push  :   0 rcall :  15 
ret   :  10 reti  :   1 rjmp  :  10 rol   :   3 ror   :   0 sbc   :   1 
sbci  :   7 sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   1 
sbrc  :   1 sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  14 std   :   8 sts   :   7 sub   :   1 subi  :   6 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 47 out of 117 (40.2%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00037c    784    108    892  131072   0.7%
[.dseg] 0x000100 0x00053c      0     60     60    4096   1.5%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 4 warnings
