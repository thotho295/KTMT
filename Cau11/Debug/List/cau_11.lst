
AVRASM ver. 2.1.30  E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_11\Debug\List\cau_11.asm Sun Dec 19 10:09:20 2021

E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_11\Debug\List\cau_11.asm(1090): warning: Register r4 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_11\Debug\List\cau_11.asm(1091): warning: Register r5 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_11\Debug\List\cau_11.asm(1092): warning: Register r6 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_11\Debug\List\cau_11.asm(1093): warning: Register r7 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_11\Debug\List\cau_11.asm(1094): warning: Register r8 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_11\Debug\List\cau_11.asm(1095): warning: Register r9 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_11\Debug\List\cau_11.asm(1096): warning: Register r11 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_11\Debug\List\cau_11.asm(1097): warning: Register r10 already defined by the .DEF directive
E:\Work\Programming_Stuffs\KienTrucMayTinh\practice\Tong_Hop_Giua_Ki\Cau_11\Debug\List\cau_11.asm(1098): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _count=R4
                 	.DEF _count_msb=R5
                 	.DEF _dem=R6
                 	.DEF _dem_msb=R7
                 	.DEF _j=R8
                 	.DEF _j_msb=R9
                 	.DEF __lcd_x=R11
                 	.DEF __lcd_y=R10
                 	.DEF __lcd_maxx=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0057 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0087 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000046 0000
000047 0000      	.DB  0x0,0x0,0x0,0x0
000048 0000      	.DB  0x0,0x0
                 
                 _0x0:
000049 6568
00004a 6c6c
00004b 2d6f
00004c 6f77      	.DB  0x68,0x65,0x6C,0x6C,0x6F,0x2D,0x77,0x6F
00004d 6c72
00004e 0064      	.DB  0x72,0x6C,0x64,0x0
                 _0x2000003:
00004f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000050 0006      	.DW  0x06
000051 0004      	.DW  0x04
000052 008c      	.DW  __REG_VARS*2
                 
000053 0002      	.DW  0x02
000054 0500      	.DW  __base_y_G100
000055 009e      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000056 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000057 94f8      	CLI
000058 27ee      	CLR  R30
000059 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005a e0f1      	LDI  R31,1
00005b bff5      	OUT  MCUCR,R31
00005c bfe5      	OUT  MCUCR,R30
00005d 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
00005f e08d      	LDI  R24,(14-2)+1
000060 e0a2      	LDI  R26,2
000061 27bb      	CLR  R27
                 __CLEAR_REG:
000062 93ed      	ST   X+,R30
000063 958a      	DEC  R24
000064 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000065 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000066 e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000067 e0a0      	LDI  R26,LOW(__SRAM_START)
000068 e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000069 93ed      	ST   X+,R30
00006a 9701      	SBIW R24,1
00006b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006c eae0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00006e 9185      	LPM  R24,Z+
00006f 9195      	LPM  R25,Z+
000070 9700      	SBIW R24,0
000071 f061      	BREQ __GLOBAL_INI_END
000072 91a5      	LPM  R26,Z+
000073 91b5      	LPM  R27,Z+
000074 9005      	LPM  R0,Z+
000075 9015      	LPM  R1,Z+
000076 01bf      	MOVW R22,R30
000077 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000078 9005      	LPM  R0,Z+
000079 920d      	ST   X+,R0
00007a 9701      	SBIW R24,1
00007b f7e1      	BRNE __GLOBAL_INI_LOOP
00007c 01fb      	MOVW R30,R22
00007d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00007e bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00007f efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000080 bfed      	OUT  SPL,R30
000081 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000082 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000083 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000084 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000085 940c 00c0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * cau_11.c
                 ; *
                 ; * Created: 11/5/2021 10:52:15
                 ; * Author: gold_
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;
                 ;#define BT      PINB.2
                 ;#define RED     PORTD.4
                 ;#define GREEN   PORTD.5
                 ;#define BLUE    PORTD.6
                 ;
                 ;int count = 0;
                 ;int dem, j= 0;
                 ;
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0017 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000087 920a      	ST   -Y,R0
000088 921a      	ST   -Y,R1
000089 92fa      	ST   -Y,R15
00008a 936a      	ST   -Y,R22
00008b 937a      	ST   -Y,R23
00008c 938a      	ST   -Y,R24
00008d 939a      	ST   -Y,R25
00008e 93aa      	ST   -Y,R26
00008f 93ba      	ST   -Y,R27
000090 93ea      	ST   -Y,R30
000091 93fa      	ST   -Y,R31
000092 b7ef      	IN   R30,SREG
000093 93ea      	ST   -Y,R30
                 ; 0000 0018 
                 ; 0000 0019     TCNT0=0x9C;
000094 e9ec      	LDI  R30,LOW(156)
000095 bfe2      	OUT  0x32,R30
                 ; 0000 001A 
                 ; 0000 001B     if(j <= 5) {
000096 e0e5      	LDI  R30,LOW(5)
000097 e0f0      	LDI  R31,HIGH(5)
000098 15e8      	CP   R30,R8
000099 05f9      	CPC  R31,R9
00009a f084      	BRLT _0x3
                 ; 0000 001C         dem++;
00009b 01f3      	MOVW R30,R6
00009c 9631      	ADIW R30,1
00009d 013f      	MOVW R6,R30
                 ; 0000 001D         lcd_gotoxy(j,0);
00009e 928a      	ST   -Y,R8
00009f d102      	RCALL SUBOPT_0x0
                 ; 0000 001E         lcd_putsf("hello-world");
                 ; 0000 001F         if(dem >= 100) {
0000a0 e6e4      	LDI  R30,LOW(100)
0000a1 e0f0      	LDI  R31,HIGH(100)
0000a2 166e      	CP   R6,R30
0000a3 067f      	CPC  R7,R31
0000a4 f034      	BRLT _0x4
                 ; 0000 0020             dem = 0;
0000a5 2466      	CLR  R6
0000a6 2477      	CLR  R7
                 ; 0000 0021             lcd_clear();
0000a7 d09c      	RCALL _lcd_clear
                 ; 0000 0022             j++;
0000a8 01f4      	MOVW R30,R8
0000a9 9631      	ADIW R30,1
0000aa 014f      	MOVW R8,R30
                 ; 0000 0023         }
                 ; 0000 0024     }
                 _0x4:
                 ; 0000 0025     if(j > 5) {
                 _0x3:
0000ab e0e5      	LDI  R30,LOW(5)
0000ac e0f0      	LDI  R31,HIGH(5)
0000ad 15e8      	CP   R30,R8
0000ae 05f9      	CPC  R31,R9
0000af f414      	BRGE _0x5
                 ; 0000 0026         j = 0;
0000b0 2488      	CLR  R8
0000b1 2499      	CLR  R9
                 ; 0000 0027     }
                 ; 0000 0028 }
                 _0x5:
0000b2 91e9      	LD   R30,Y+
0000b3 bfef      	OUT  SREG,R30
0000b4 91f9      	LD   R31,Y+
0000b5 91e9      	LD   R30,Y+
0000b6 91b9      	LD   R27,Y+
0000b7 91a9      	LD   R26,Y+
0000b8 9199      	LD   R25,Y+
0000b9 9189      	LD   R24,Y+
0000ba 9179      	LD   R23,Y+
0000bb 9169      	LD   R22,Y+
0000bc 90f9      	LD   R15,Y+
0000bd 9019      	LD   R1,Y+
0000be 9009      	LD   R0,Y+
0000bf 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 002B {
                 _main:
                 ; .FSTART _main
                 ; 0000 002C     DDRB = 0x00;
0000c0 e0e0      	LDI  R30,LOW(0)
0000c1 bbe7      	OUT  0x17,R30
                 ; 0000 002D     PORTB = 0x04;
0000c2 e0e4      	LDI  R30,LOW(4)
0000c3 bbe8      	OUT  0x18,R30
                 ; 0000 002E     DDRD = 0x70;
0000c4 e7e0      	LDI  R30,LOW(112)
0000c5 bbe1      	OUT  0x11,R30
                 ; 0000 002F 
                 ; 0000 0030     ASSR=0<<AS0;
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 bfe0      	OUT  0x30,R30
                 ; 0000 0031     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
0000c8 e0e2      	LDI  R30,LOW(2)
0000c9 bfe3      	OUT  0x33,R30
                 ; 0000 0032     TCNT0=0x9C;
0000ca e9ec      	LDI  R30,LOW(156)
0000cb bfe2      	OUT  0x32,R30
                 ; 0000 0033     OCR0=0x00;
0000cc e0e0      	LDI  R30,LOW(0)
0000cd bfe1      	OUT  0x31,R30
                 ; 0000 0034 
                 ; 0000 0035     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000ce e0e1      	LDI  R30,LOW(1)
0000cf bfe7      	OUT  0x37,R30
                 ; 0000 0036     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
0000d0 e0e0      	LDI  R30,LOW(0)
0000d1 93e0 007d 	STS  125,R30
                 ; 0000 0037 
                 ; 0000 0038     lcd_init(16);
0000d3 e1a0      	LDI  R26,LOW(16)
0000d4 d0a1      	RCALL _lcd_init
                 ; 0000 0039     lcd_gotoxy(0, 0);
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 93ea      	ST   -Y,R30
0000d7 d0ca      	RCALL SUBOPT_0x0
                 ; 0000 003A     lcd_putsf("hello-world");
                 ; 0000 003B 
                 ; 0000 003C     #asm("sei")
0000d8 9478      	sei
                 ; 0000 003D 
                 ; 0000 003E while (1)
                 _0x6:
                 ; 0000 003F     {
                 ; 0000 0040 
                 ; 0000 0041         if(BT == 0) {
0000d9 99b2      	SBIC 0x16,2
0000da c007      	RJMP _0x9
                 ; 0000 0042             delay_ms(40);
0000db e2a8      	LDI  R26,LOW(40)
0000dc e0b0      	LDI  R27,0
0000dd 940e 01b3 	CALL _delay_ms
                 ; 0000 0043             count++;
0000df 01f2      	MOVW R30,R4
0000e0 9631      	ADIW R30,1
0000e1 012f      	MOVW R4,R30
                 ; 0000 0044         }
                 ; 0000 0045         if(count == 1) {
                 _0x9:
0000e2 e0e1      	LDI  R30,LOW(1)
0000e3 e0f0      	LDI  R31,HIGH(1)
0000e4 15e4      	CP   R30,R4
0000e5 05f5      	CPC  R31,R5
0000e6 f421      	BRNE _0xA
                 ; 0000 0046             RED = 1;
0000e7 9a94      	SBI  0x12,4
                 ; 0000 0047             GREEN = 0;
0000e8 9895      	CBI  0x12,5
                 ; 0000 0048             BLUE = 0;
0000e9 9896      	CBI  0x12,6
                 ; 0000 0049         } else if (count == 2) {
0000ea c011      	RJMP _0x11
                 _0xA:
0000eb e0e2      	LDI  R30,LOW(2)
0000ec e0f0      	LDI  R31,HIGH(2)
0000ed 15e4      	CP   R30,R4
0000ee 05f5      	CPC  R31,R5
0000ef f421      	BRNE _0x12
                 ; 0000 004A             RED = 0;
0000f0 9894      	CBI  0x12,4
                 ; 0000 004B             GREEN = 1;
0000f1 9a95      	SBI  0x12,5
                 ; 0000 004C             BLUE = 0;
0000f2 9896      	CBI  0x12,6
                 ; 0000 004D         } else if (count == 3) {
0000f3 c008      	RJMP _0x19
                 _0x12:
0000f4 e0e3      	LDI  R30,LOW(3)
0000f5 e0f0      	LDI  R31,HIGH(3)
0000f6 15e4      	CP   R30,R4
0000f7 05f5      	CPC  R31,R5
0000f8 f419      	BRNE _0x1A
                 ; 0000 004E             RED = 0;
0000f9 9894      	CBI  0x12,4
                 ; 0000 004F             GREEN = 0;
0000fa 9895      	CBI  0x12,5
                 ; 0000 0050             BLUE = 1;
0000fb 9a96      	SBI  0x12,6
                 ; 0000 0051         }
                 ; 0000 0052         if (count > 3) {
                 _0x1A:
                 _0x19:
                 _0x11:
0000fc e0e3      	LDI  R30,LOW(3)
0000fd e0f0      	LDI  R31,HIGH(3)
0000fe 15e4      	CP   R30,R4
0000ff 05f5      	CPC  R31,R5
000100 f41c      	BRGE _0x21
                 ; 0000 0053             count = 1;
000101 e0e1      	LDI  R30,LOW(1)
000102 e0f0      	LDI  R31,HIGH(1)
000103 012f      	MOVW R4,R30
                 ; 0000 0054         }
                 ; 0000 0055 
                 ; 0000 0056     }
                 _0x21:
000104 cfd4      	RJMP _0x6
                 ; 0000 0057 }
                 _0x22:
000105 cfff      	RJMP _0x22
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000106 93aa      	ST   -Y,R26
000107 81e8      	LD   R30,Y
000108 71e0      	ANDI R30,LOW(0x10)
000109 f011      	BREQ _0x2000004
00010a 9adb      	SBI  0x1B,3
00010b c001      	RJMP _0x2000005
                 _0x2000004:
00010c 98db      	CBI  0x1B,3
                 _0x2000005:
00010d 81e8      	LD   R30,Y
00010e 72e0      	ANDI R30,LOW(0x20)
00010f f011      	BREQ _0x2000006
000110 9adc      	SBI  0x1B,4
000111 c001      	RJMP _0x2000007
                 _0x2000006:
000112 98dc      	CBI  0x1B,4
                 _0x2000007:
000113 81e8      	LD   R30,Y
000114 74e0      	ANDI R30,LOW(0x40)
000115 f011      	BREQ _0x2000008
000116 9add      	SBI  0x1B,5
000117 c001      	RJMP _0x2000009
                 _0x2000008:
000118 98dd      	CBI  0x1B,5
                 _0x2000009:
000119 81e8      	LD   R30,Y
00011a 78e0      	ANDI R30,LOW(0x80)
00011b f011      	BREQ _0x200000A
00011c 9ade      	SBI  0x1B,6
00011d c001      	RJMP _0x200000B
                 _0x200000A:
00011e 98de      	CBI  0x1B,6
                 _0x200000B:
                +
00011f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000120 958a     +DEC R24
000121 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000122 9ada      	SBI  0x1B,2
                +
000123 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000124 958a     +DEC R24
000125 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000126 98da      	CBI  0x1B,2
                +
000127 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000128 958a     +DEC R24
000129 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00012a c075      	RJMP _0x2020001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00012b 93aa      	ST   -Y,R26
00012c 81a8      	LD   R26,Y
00012d dfd8      	RCALL __lcd_write_nibble_G100
00012e 81e8          ld    r30,y
00012f 95e2          swap  r30
000130 83e8          st    y,r30
000131 81a8      	LD   R26,Y
000132 dfd3      	RCALL __lcd_write_nibble_G100
                +
000133 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000134 958a     +DEC R24
000135 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000136 c069      	RJMP _0x2020001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000137 93aa      	ST   -Y,R26
000138 81e8      	LD   R30,Y
000139 e0f0      	LDI  R31,0
00013a 50e0      	SUBI R30,LOW(-__base_y_G100)
00013b 4ffb      	SBCI R31,HIGH(-__base_y_G100)
00013c 81e0      	LD   R30,Z
00013d 81a9      	LDD  R26,Y+1
00013e 0fae      	ADD  R26,R30
00013f dfeb      	RCALL __lcd_write_data
000140 80b9      	LDD  R11,Y+1
000141 80a8      	LDD  R10,Y+0
000142 9622      	ADIW R28,2
000143 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000144 e0a2      	LDI  R26,LOW(2)
000145 d061      	RCALL SUBOPT_0x1
000146 e0ac      	LDI  R26,LOW(12)
000147 dfe3      	RCALL __lcd_write_data
000148 e0a1      	LDI  R26,LOW(1)
000149 d05d      	RCALL SUBOPT_0x1
00014a e0e0      	LDI  R30,LOW(0)
00014b 2eae      	MOV  R10,R30
00014c 2ebe      	MOV  R11,R30
00014d 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00014e 93aa      	ST   -Y,R26
00014f 81a8      	LD   R26,Y
000150 30aa      	CPI  R26,LOW(0xA)
000151 f011      	BREQ _0x2000011
000152 14bd      	CP   R11,R13
000153 f048      	BRLO _0x2000010
                 _0x2000011:
000154 e0e0      	LDI  R30,LOW(0)
000155 93ea      	ST   -Y,R30
000156 94a3      	INC  R10
000157 2daa      	MOV  R26,R10
000158 dfde      	RCALL _lcd_gotoxy
000159 81a8      	LD   R26,Y
00015a 30aa      	CPI  R26,LOW(0xA)
00015b f409      	BRNE _0x2000013
00015c c043      	RJMP _0x2020001
                 _0x2000013:
                 _0x2000010:
00015d 94b3      	INC  R11
00015e 9ad8      	SBI  0x1B,0
00015f 81a8      	LD   R26,Y
000160 dfca      	RCALL __lcd_write_data
000161 98d8      	CBI  0x1B,0
000162 c03d      	RJMP _0x2020001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000163 93ba      	ST   -Y,R27
000164 93aa      	ST   -Y,R26
000165 931a      	ST   -Y,R17
                 _0x2000017:
000166 81e9      	LDD  R30,Y+1
000167 81fa      	LDD  R31,Y+1+1
000168 9631      	ADIW R30,1
000169 83e9      	STD  Y+1,R30
00016a 83fa      	STD  Y+1+1,R31
00016b 9731      	SBIW R30,1
00016c 91e4      	LPM  R30,Z
00016d 2f1e      	MOV  R17,R30
00016e 30e0      	CPI  R30,0
00016f f019      	BREQ _0x2000019
000170 2fa1      	MOV  R26,R17
000171 dfdc      	RCALL _lcd_putchar
000172 cff3      	RJMP _0x2000017
                 _0x2000019:
000173 8118      	LDD  R17,Y+0
000174 9623      	ADIW R28,3
000175 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000176 93aa      	ST   -Y,R26
000177 9ad3      	SBI  0x1A,3
000178 9ad4      	SBI  0x1A,4
000179 9ad5      	SBI  0x1A,5
00017a 9ad6      	SBI  0x1A,6
00017b 9ad2      	SBI  0x1A,2
00017c 9ad0      	SBI  0x1A,0
00017d 9ad1      	SBI  0x1A,1
00017e 98da      	CBI  0x1B,2
00017f 98d8      	CBI  0x1B,0
000180 98d9      	CBI  0x1B,1
000181 80d8      	LDD  R13,Y+0
000182 81e8      	LD   R30,Y
000183 58e0      	SUBI R30,-LOW(128)
                +
000184 93e0 0502+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000186 81e8      	LD   R30,Y
000187 54e0      	SUBI R30,-LOW(192)
                +
000188 93e0 0503+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00018a e1a4      	LDI  R26,LOW(20)
00018b e0b0      	LDI  R27,0
00018c 940e 01b3 	CALL _delay_ms
00018e d01d      	RCALL SUBOPT_0x2
00018f d01c      	RCALL SUBOPT_0x2
000190 d01b      	RCALL SUBOPT_0x2
000191 e2a0      	LDI  R26,LOW(32)
000192 df73      	RCALL __lcd_write_nibble_G100
                +
000193 ec88     +LDI R24 , LOW ( 200 )
000194 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000195 9701     +SBIW R24 , 1
000196 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000197 e2a8      	LDI  R26,LOW(40)
000198 df92      	RCALL __lcd_write_data
000199 e0a4      	LDI  R26,LOW(4)
00019a df90      	RCALL __lcd_write_data
00019b e8a5      	LDI  R26,LOW(133)
00019c df8e      	RCALL __lcd_write_data
00019d e0a6      	LDI  R26,LOW(6)
00019e df8c      	RCALL __lcd_write_data
00019f dfa4      	RCALL _lcd_clear
                 _0x2020001:
0001a0 9621      	ADIW R28,1
0001a1 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000500           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0001a2 e0a0      	LDI  R26,LOW(0)
0001a3 df93      	RCALL _lcd_gotoxy
                +
0001a4 e9a2     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0001a5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0001a6 cfbc      	RJMP _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0001a7 df83      	RCALL __lcd_write_data
0001a8 e0a3      	LDI  R26,LOW(3)
0001a9 e0b0      	LDI  R27,0
0001aa 940c 01b3 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
0001ac e3a0      	LDI  R26,LOW(48)
0001ad df58      	RCALL __lcd_write_nibble_G100
                +
0001ae ec88     +LDI R24 , LOW ( 200 )
0001af e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001b0 9701     +SBIW R24 , 1
0001b1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001b2 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001b3 9610      	adiw r26,0
0001b4 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001b5 ed80     +LDI R24 , LOW ( 0x7D0 )
0001b6 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001b7 9701     +SBIW R24 , 1
0001b8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001b9 95a8      	wdr
0001ba 9711      	sbiw r26,1
0001bb f7c9      	brne __delay_ms0
                 __delay_ms1:
0001bc 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   7 r5 :   4 r6 :   4 r7 :   2 
r8 :   6 r9 :   3 r10:   4 r11:   4 r12:   0 r13:   2 r14:   0 r15:   2 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  24 r25:   7 r26:  39 r27:  10 r28:   4 r29:   1 r30: 100 r31:  24 
x  :   3 y  :  58 z  :   9 
Registers used: 26 out of 35 (74.3%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   8 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   8 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   2 brmi  :   0 brne  :  15 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   2 
cbi   :  15 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   8 cpc   :   7 cpi   :   3 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   1 inc   :   2 jmp   :  37 ld    :  26 ldd   :   7 
ldi   :  72 lds   :   0 lpm   :   9 lsl   :   0 lsr   :   0 mov   :   5 
movw  :  10 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   0 out   :  16 pop   :   0 push  :   0 rcall :  25 
ret   :   6 reti  :   1 rjmp  :  16 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   1 sbi   :  16 sbic  :   1 sbis  :   0 sbiw  :   8 sbr   :   0 
sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  27 std   :   2 sts   :   4 sub   :   0 subi  :   3 
swap  :   1 tst   :   0 wdr   :   1 
Instructions used: 41 out of 117 (35.0%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00037a    856     34    890  131072   0.7%
[.dseg] 0x000100 0x000504      0      4      4    4096   0.1%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
