
AVRASM ver. 2.1.30  D:\KienTrucMayTinh\KTGK\Bai2\Debug\List\Bai2.asm Sun Nov 07 21:38:13 2021

D:\KienTrucMayTinh\KTGK\Bai2\Debug\List\Bai2.asm(1090): warning: Register r5 already defined by the .DEF directive
D:\KienTrucMayTinh\KTGK\Bai2\Debug\List\Bai2.asm(1091): warning: Register r4 already defined by the .DEF directive
D:\KienTrucMayTinh\KTGK\Bai2\Debug\List\Bai2.asm(1092): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00004f 0001
000050 0002
000051 0003
000052 0004      	.DB  0x1,0x0,0x2,0x0,0x3,0x0,0x4,0x0
000053 0005
000054 0006
000055 0007
000056 0008      	.DB  0x5,0x0,0x6,0x0,0x7,0x0,0x8,0x0
D:\KienTrucMayTinh\KTGK\Bai2\Debug\List\Bai2.asm(1146): warning: .cseg .db misalignment - padding zero byte
000057 0009      	.DB  0x9
                 _0x0:
000058 7525
D:\KienTrucMayTinh\KTGK\Bai2\Debug\List\Bai2.asm(1148): warning: .cseg .db misalignment - padding zero byte
000059 0000      	.DB  0x25,0x75,0x0
                 _0x2020060:
D:\KienTrucMayTinh\KTGK\Bai2\Debug\List\Bai2.asm(1150): warning: .cseg .db misalignment - padding zero byte
00005a 0001      	.DB  0x1
                 _0x2020000:
00005b 4e2d
00005c 4e41
00005d 4900
00005e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\KienTrucMayTinh\KTGK\Bai2\Debug\List\Bai2.asm(1153): warning: .cseg .db misalignment - padding zero byte
00005f 0000      	.DB  0x0
                 _0x2040003:
000060 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000061 0011      	.DW  0x11
000062 0500      	.DW  _keypad
000063 009e      	.DW  _0x3*2
                 
000064 0001      	.DW  0x01
000065 0522      	.DW  __seed_G101
000066 00b4      	.DW  _0x2020060*2
                 
000067 0002      	.DW  0x02
000068 0526      	.DW  __base_y_G102
000069 00c0      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
00006a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006b 94f8      	CLI
00006c 27ee      	CLR  R30
00006d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006e e0f1      	LDI  R31,1
00006f bff5      	OUT  MCUCR,R31
000070 bfe5      	OUT  MCUCR,R30
000071 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000073 e08d      	LDI  R24,(14-2)+1
000074 e0a2      	LDI  R26,2
000075 27bb      	CLR  R27
                 __CLEAR_REG:
000076 93ed      	ST   X+,R30
000077 958a      	DEC  R24
000078 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000079 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007a e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007b e0a0      	LDI  R26,LOW(__SRAM_START)
00007c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00007d 93ed      	ST   X+,R30
00007e 9701      	SBIW R24,1
00007f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000080 ece2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000081 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000082 9185      	LPM  R24,Z+
000083 9195      	LPM  R25,Z+
000084 9700      	SBIW R24,0
000085 f061      	BREQ __GLOBAL_INI_END
000086 91a5      	LPM  R26,Z+
000087 91b5      	LPM  R27,Z+
000088 9005      	LPM  R0,Z+
000089 9015      	LPM  R1,Z+
00008a 01bf      	MOVW R22,R30
00008b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008c 9005      	LPM  R0,Z+
00008d 920d      	ST   X+,R0
00008e 9701      	SBIW R24,1
00008f f7e1      	BRNE __GLOBAL_INI_LOOP
000090 01fb      	MOVW R30,R22
000091 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000092 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000093 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000094 bfed      	OUT  SPL,R30
000095 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000096 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000097 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000098 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000099 940c 00f0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;/*
                 ; * Bai2.c
                 ; *  viet chuong trinh quet ma tran ban phim 3x3 va hien thi so thu tu phim bam den LED
                 ; * Created: 11/7/2021 9:17:54 PM
                 ; * Author: nguyen thu thao
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <stdint.h>
                 ;#include <stdlib.h>
                 ;#include <alcd.h>
                 ;int keypad[3][3] = {1,2,3,4,5,6,7,8,9};
                 
                 	.DSEG
                 ;char data[16];
                 ;void BUTTON(){
                 ; 0000 0010 void BUTTON(){
                 
                 	.CSEG
                 _BUTTON:
                 ; .FSTART _BUTTON
                 ; 0000 0011      char a;
                 ; 0000 0012      int i, j;
                 ; 0000 0013      for(j=0; j < 3; j++ ){
00009b 940e 03ea 	CALL __SAVELOCR6
                 ;	a -> R17
                 ;	i -> R18,R19
                 ;	j -> R20,R21
                +
00009d e040     +LDI R20 , LOW ( 0 )
00009e e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x5:
                +
00009f 3043     +CPI R20 , LOW ( 3 )
0000a0 e0e0     +LDI R30 , HIGH ( 3 )
0000a1 075e     +CPC R21 , R30
                 	__CPWRN 20,21,3
0000a2 f00c      	BRLT PC+2
0000a3 c048      	RJMP _0x6
                 ; 0000 0014      // gan logic cac cot
                 ; 0000 0015 
                 ; 0000 0016          if(j == 0) PORTF = 0b11111101;
0000a4 2e04      	MOV  R0,R20
0000a5 2a05      	OR   R0,R21
0000a6 f419      	BRNE _0x7
0000a7 efed      	LDI  R30,LOW(253)
0000a8 93e0 0062 	STS  98,R30
                 ; 0000 0017          if(j == 1) PORTF = 0b11110111;
                 _0x7:
0000aa e0e1      	LDI  R30,LOW(1)
0000ab e0f0      	LDI  R31,HIGH(1)
0000ac 17e4      	CP   R30,R20
0000ad 07f5      	CPC  R31,R21
0000ae f419      	BRNE _0x8
0000af efe7      	LDI  R30,LOW(247)
0000b0 93e0 0062 	STS  98,R30
                 ; 0000 0018          if(j == 2) PORTF = 0b11011111;
                 _0x8:
0000b2 e0e2      	LDI  R30,LOW(2)
0000b3 e0f0      	LDI  R31,HIGH(2)
0000b4 17e4      	CP   R30,R20
0000b5 07f5      	CPC  R31,R21
0000b6 f419      	BRNE _0x9
0000b7 edef      	LDI  R30,LOW(223)
0000b8 93e0 0062 	STS  98,R30
                 ; 0000 0019          for(i=0; i<3; i++){
                 _0x9:
                +
0000ba e020     +LDI R18 , LOW ( 0 )
0000bb e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0xB:
                +
0000bc 3023     +CPI R18 , LOW ( 3 )
0000bd e0e0     +LDI R30 , HIGH ( 3 )
0000be 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3
0000bf f54c      	BRGE _0xC
                 ; 0000 001A             if(i==0){
0000c0 2e02      	MOV  R0,R18
0000c1 2a03      	OR   R0,R19
0000c2 f449      	BRNE _0xD
                 ; 0000 001B                 a=PINF&0x04;
0000c3 b1e0      	IN   R30,0x0
0000c4 70e4      	ANDI R30,LOW(0x4)
0000c5 2f1e      	MOV  R17,R30
                 ; 0000 001C                 if(a != 0x04){
0000c6 3014      	CPI  R17,4
0000c7 f021      	BREQ _0xE
                 ; 0000 001D                      lcd_gotoxy(0,0);
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 93ea      	ST   -Y,R30
0000ca 940e 0362 	CALL SUBOPT_0x0
                 ; 0000 001E                      sprintf(data, "%u", keypad[i][j]);
                 ; 0000 001F                      lcd_puts(data);
                 ; 0000 0020                      delay_ms(500);
                 ; 0000 0021                      }
                 ; 0000 0022             }
                 _0xE:
                 ; 0000 0023             if(i==1){
                 _0xD:
0000cc e0e1      	LDI  R30,LOW(1)
0000cd e0f0      	LDI  R31,HIGH(1)
0000ce 17e2      	CP   R30,R18
0000cf 07f3      	CPC  R31,R19
0000d0 f441      	BRNE _0xF
                 ; 0000 0024                 a=PINF&0x10;
0000d1 b1e0      	IN   R30,0x0
0000d2 71e0      	ANDI R30,LOW(0x10)
0000d3 2f1e      	MOV  R17,R30
                 ; 0000 0025                 if(a != 0x10){
0000d4 3110      	CPI  R17,16
0000d5 f019      	BREQ _0x10
                 ; 0000 0026                     lcd_gotoxy(i,0);
0000d6 932a      	ST   -Y,R18
0000d7 940e 0362 	CALL SUBOPT_0x0
                 ; 0000 0027                     sprintf(data, "%u", keypad[i][j]);
                 ; 0000 0028                     lcd_puts(data);
                 ; 0000 0029                     delay_ms(500);
                 ; 0000 002A                  }
                 ; 0000 002B              }
                 _0x10:
                 ; 0000 002C             if(i==2){
                 _0xF:
0000d9 e0e2      	LDI  R30,LOW(2)
0000da e0f0      	LDI  R31,HIGH(2)
0000db 17e2      	CP   R30,R18
0000dc 07f3      	CPC  R31,R19
0000dd f441      	BRNE _0x11
                 ; 0000 002D                 a=PINF&0x01;
0000de b1e0      	IN   R30,0x0
0000df 70e1      	ANDI R30,LOW(0x1)
0000e0 2f1e      	MOV  R17,R30
                 ; 0000 002E                 if(a != 0x01){
0000e1 3011      	CPI  R17,1
0000e2 f019      	BREQ _0x12
                 ; 0000 002F                      lcd_gotoxy(i,0);
0000e3 932a      	ST   -Y,R18
0000e4 940e 0362 	CALL SUBOPT_0x0
                 ; 0000 0030                      sprintf(data, "%u", keypad[i][j]);
                 ; 0000 0031                      lcd_puts(data);
                 ; 0000 0032                      delay_ms(500);
                 ; 0000 0033                  }
                 ; 0000 0034              }
                 _0x12:
                 ; 0000 0035          }
                 _0x11:
                +
0000e6 5f2f     +SUBI R18 , LOW ( - 1 )
0000e7 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000e8 cfd3      	RJMP _0xB
                 _0xC:
                 ; 0000 0036      }
                +
0000e9 5f4f     +SUBI R20 , LOW ( - 1 )
0000ea 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0000eb cfb3      	RJMP _0x5
                 _0x6:
                 ; 0000 0037 }
0000ec 940e 03f1 	CALL __LOADLOCR6
0000ee 9626      	ADIW R28,6
0000ef 9508      	RET
                 ; .FEND
                 ;void main()
                 ; 0000 0039 {
                 _main:
                 ; .FSTART _main
                 ; 0000 003A      DDRD = 0xFF;
0000f0 efef      	LDI  R30,LOW(255)
0000f1 bbe1      	OUT  0x11,R30
                 ; 0000 003B      PORTD = 0xB6;
0000f2 ebe6      	LDI  R30,LOW(182)
0000f3 bbe2      	OUT  0x12,R30
                 ; 0000 003C      lcd_init(16);
0000f4 e1a0      	LDI  R26,LOW(16)
0000f5 940e 031a 	CALL _lcd_init
                 ; 0000 003D      DDRF = 0b11101010;
0000f7 eeea      	LDI  R30,LOW(234)
0000f8 93e0 0061 	STS  97,R30
                 ; 0000 003E      PORTF = 0b00010101;
0000fa e1e5      	LDI  R30,LOW(21)
0000fb 93e0 0062 	STS  98,R30
                 ; 0000 003F      while(1)
                 _0x13:
                 ; 0000 0040      {
                 ; 0000 0041          BUTTON();
0000fd df9d      	RCALL _BUTTON
                 ; 0000 0042          lcd_clear();
0000fe 940e 02e8 	CALL _lcd_clear
                 ; 0000 0043      }
000100 cffc      	RJMP _0x13
                 ; 0000 0044 }
                 _0x16:
000101 cfff      	RJMP _0x16
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000102 93ba      	ST   -Y,R27
000103 93aa      	ST   -Y,R26
000104 931a      	ST   -Y,R17
000105 930a      	ST   -Y,R16
000106 81aa      	LDD  R26,Y+2
000107 81bb      	LDD  R27,Y+2+1
000108 9612      	ADIW R26,2
000109 940e 03dd 	CALL __GETW1P
00010b 9730      	SBIW R30,0
00010c f159      	BREQ _0x2000010
00010d 81aa      	LDD  R26,Y+2
00010e 81bb      	LDD  R27,Y+2+1
00010f 9614      	ADIW R26,4
000110 940e 03dd 	CALL __GETW1P
000112 018f      	MOVW R16,R30
000113 9730      	SBIW R30,0
000114 f061      	BREQ _0x2000012
                +
000115 3002     +CPI R16 , LOW ( 2 )
000116 e0e0     +LDI R30 , HIGH ( 2 )
000117 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000118 f098      	BRLO _0x2000013
000119 01f8      	MOVW R30,R16
00011a 9731      	SBIW R30,1
00011b 018f      	MOVW R16,R30
                +
00011c 81aa     +LDD R26 , Y + 2
00011d 81bb     +LDD R27 , Y + 2 + 1
00011e 9614     +ADIW R26 , 4
00011f 93ed     +ST X + , R30
000120 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000121 81aa      	LDD  R26,Y+2
000122 81bb      	LDD  R27,Y+2+1
000123 9612      	ADIW R26,2
000124 91ed      	LD   R30,X+
000125 91fd      	LD   R31,X+
000126 9631      	ADIW R30,1
000127 93fe      	ST   -X,R31
000128 93ee      	ST   -X,R30
000129 9731      	SBIW R30,1
00012a 81ac      	LDD  R26,Y+4
00012b 83a0      	STD  Z+0,R26
                 _0x2000013:
00012c 81aa      	LDD  R26,Y+2
00012d 81bb      	LDD  R27,Y+2+1
00012e 940e 03dd 	CALL __GETW1P
000130 23ff      	TST  R31
000131 f02a      	BRMI _0x2000014
000132 91ed      	LD   R30,X+
000133 91fd      	LD   R31,X+
000134 9631      	ADIW R30,1
000135 93fe      	ST   -X,R31
000136 93ee      	ST   -X,R30
                 _0x2000014:
000137 c006      	RJMP _0x2000015
                 _0x2000010:
000138 81aa      	LDD  R26,Y+2
000139 81bb      	LDD  R27,Y+2+1
00013a efef      	LDI  R30,LOW(65535)
00013b efff      	LDI  R31,HIGH(65535)
00013c 93ed      	ST   X+,R30
00013d 93fc      	ST   X,R31
                 _0x2000015:
00013e 8119      	LDD  R17,Y+1
00013f 8108      	LDD  R16,Y+0
000140 9625      	ADIW R28,5
000141 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000142 93ba      	ST   -Y,R27
000143 93aa      	ST   -Y,R26
000144 9726      	SBIW R28,6
000145 940e 03ea 	CALL __SAVELOCR6
000147 e010      	LDI  R17,0
000148 85ac      	LDD  R26,Y+12
000149 85bd      	LDD  R27,Y+12+1
00014a e0e0      	LDI  R30,LOW(0)
00014b e0f0      	LDI  R31,HIGH(0)
00014c 93ed      	ST   X+,R30
00014d 93fc      	ST   X,R31
                 _0x2000016:
00014e 89ea      	LDD  R30,Y+18
00014f 89fb      	LDD  R31,Y+18+1
000150 9631      	ADIW R30,1
000151 8bea      	STD  Y+18,R30
000152 8bfb      	STD  Y+18+1,R31
000153 9731      	SBIW R30,1
000154 91e4      	LPM  R30,Z
000155 2f2e      	MOV  R18,R30
000156 30e0      	CPI  R30,0
000157 f409      	BRNE PC+2
000158 c115      	RJMP _0x2000018
000159 2fe1      	MOV  R30,R17
00015a 30e0      	CPI  R30,0
00015b f439      	BRNE _0x200001C
00015c 3225      	CPI  R18,37
00015d f411      	BRNE _0x200001D
00015e e011      	LDI  R17,LOW(1)
00015f c002      	RJMP _0x200001E
                 _0x200001D:
000160 940e 038c 	CALL SUBOPT_0x1
                 _0x200001E:
000162 c10a      	RJMP _0x200001B
                 _0x200001C:
000163 30e1      	CPI  R30,LOW(0x1)
000164 f4a9      	BRNE _0x200001F
000165 3225      	CPI  R18,37
000166 f419      	BRNE _0x2000020
000167 940e 038c 	CALL SUBOPT_0x1
000169 c102      	RJMP _0x20000CC
                 _0x2000020:
00016a e012      	LDI  R17,LOW(2)
00016b e040      	LDI  R20,LOW(0)
00016c e000      	LDI  R16,LOW(0)
00016d 322d      	CPI  R18,45
00016e f411      	BRNE _0x2000021
00016f e001      	LDI  R16,LOW(1)
000170 c0fc      	RJMP _0x200001B
                 _0x2000021:
000171 322b      	CPI  R18,43
000172 f411      	BRNE _0x2000022
000173 e24b      	LDI  R20,LOW(43)
000174 c0f8      	RJMP _0x200001B
                 _0x2000022:
000175 3220      	CPI  R18,32
000176 f411      	BRNE _0x2000023
000177 e240      	LDI  R20,LOW(32)
000178 c0f4      	RJMP _0x200001B
                 _0x2000023:
000179 c002      	RJMP _0x2000024
                 _0x200001F:
00017a 30e2      	CPI  R30,LOW(0x2)
00017b f439      	BRNE _0x2000025
                 _0x2000024:
00017c e050      	LDI  R21,LOW(0)
00017d e013      	LDI  R17,LOW(3)
00017e 3320      	CPI  R18,48
00017f f411      	BRNE _0x2000026
000180 6800      	ORI  R16,LOW(128)
000181 c0eb      	RJMP _0x200001B
                 _0x2000026:
000182 c003      	RJMP _0x2000027
                 _0x2000025:
000183 30e3      	CPI  R30,LOW(0x3)
000184 f009      	BREQ PC+2
000185 c0e7      	RJMP _0x200001B
                 _0x2000027:
000186 3320      	CPI  R18,48
000187 f010      	BRLO _0x200002A
000188 332a      	CPI  R18,58
000189 f008      	BRLO _0x200002B
                 _0x200002A:
00018a c007      	RJMP _0x2000029
                 _0x200002B:
00018b e0aa      	LDI  R26,LOW(10)
00018c 9f5a      	MUL  R21,R26
00018d 2d50      	MOV  R21,R0
00018e 2fe2      	MOV  R30,R18
00018f 53e0      	SUBI R30,LOW(48)
000190 0f5e      	ADD  R21,R30
000191 c0db      	RJMP _0x200001B
                 _0x2000029:
000192 2fe2      	MOV  R30,R18
000193 36e3      	CPI  R30,LOW(0x63)
000194 f449      	BRNE _0x200002F
000195 940e 0393 	CALL SUBOPT_0x2
000197 89e8      	LDD  R30,Y+16
000198 89f9      	LDD  R31,Y+16+1
000199 81a4      	LDD  R26,Z+4
00019a 93aa      	ST   -Y,R26
00019b 940e 0399 	CALL SUBOPT_0x3
00019d c0ce      	RJMP _0x2000030
                 _0x200002F:
00019e 37e3      	CPI  R30,LOW(0x73)
00019f f441      	BRNE _0x2000032
0001a0 940e 0393 	CALL SUBOPT_0x2
0001a2 940e 039f 	CALL SUBOPT_0x4
0001a4 940e 0349 	CALL _strlen
0001a6 2f1e      	MOV  R17,R30
0001a7 c00a      	RJMP _0x2000033
                 _0x2000032:
0001a8 37e0      	CPI  R30,LOW(0x70)
0001a9 f461      	BRNE _0x2000035
0001aa 940e 0393 	CALL SUBOPT_0x2
0001ac 940e 039f 	CALL SUBOPT_0x4
0001ae 940e 0355 	CALL _strlenf
0001b0 2f1e      	MOV  R17,R30
0001b1 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001b2 6002      	ORI  R16,LOW(2)
0001b3 770f      	ANDI R16,LOW(127)
0001b4 e030      	LDI  R19,LOW(0)
0001b5 c034      	RJMP _0x2000036
                 _0x2000035:
0001b6 36e4      	CPI  R30,LOW(0x64)
0001b7 f011      	BREQ _0x2000039
0001b8 36e9      	CPI  R30,LOW(0x69)
0001b9 f411      	BRNE _0x200003A
                 _0x2000039:
0001ba 6004      	ORI  R16,LOW(4)
0001bb c002      	RJMP _0x200003B
                 _0x200003A:
0001bc 37e5      	CPI  R30,LOW(0x75)
0001bd f431      	BRNE _0x200003C
                 _0x200003B:
0001be e8ec      	LDI  R30,LOW(_tbl10_G100*2)
0001bf e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001c0 83ee      	STD  Y+6,R30
0001c1 83ff      	STD  Y+6+1,R31
0001c2 e015      	LDI  R17,LOW(5)
0001c3 c00c      	RJMP _0x200003D
                 _0x200003C:
0001c4 35e8      	CPI  R30,LOW(0x58)
0001c5 f411      	BRNE _0x200003F
0001c6 6008      	ORI  R16,LOW(8)
0001c7 c003      	RJMP _0x2000040
                 _0x200003F:
0001c8 37e8      	CPI  R30,LOW(0x78)
0001c9 f009      	BREQ PC+2
0001ca c0a1      	RJMP _0x2000071
                 _0x2000040:
0001cb e9e6      	LDI  R30,LOW(_tbl16_G100*2)
0001cc e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001cd 83ee      	STD  Y+6,R30
0001ce 83ff      	STD  Y+6+1,R31
0001cf e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001d0 ff02      	SBRS R16,2
0001d1 c014      	RJMP _0x2000042
0001d2 940e 0393 	CALL SUBOPT_0x2
0001d4 940e 03a9 	CALL SUBOPT_0x5
0001d6 85ab      	LDD  R26,Y+11
0001d7 23aa      	TST  R26
0001d8 f43a      	BRPL _0x2000043
0001d9 85ea      	LDD  R30,Y+10
0001da 85fb      	LDD  R31,Y+10+1
0001db 940e 03d4 	CALL __ANEGW1
0001dd 87ea      	STD  Y+10,R30
0001de 87fb      	STD  Y+10+1,R31
0001df e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001e0 3040      	CPI  R20,0
0001e1 f011      	BREQ _0x2000044
0001e2 5f1f      	SUBI R17,-LOW(1)
0001e3 c001      	RJMP _0x2000045
                 _0x2000044:
0001e4 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001e5 c004      	RJMP _0x2000046
                 _0x2000042:
0001e6 940e 0393 	CALL SUBOPT_0x2
0001e8 940e 03a9 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
0001ea fd00      	SBRC R16,0
0001eb c011      	RJMP _0x2000047
                 _0x2000048:
0001ec 1715      	CP   R17,R21
0001ed f478      	BRSH _0x200004A
0001ee ff07      	SBRS R16,7
0001ef c008      	RJMP _0x200004B
0001f0 ff02      	SBRS R16,2
0001f1 c004      	RJMP _0x200004C
0001f2 7f0b      	ANDI R16,LOW(251)
0001f3 2f24      	MOV  R18,R20
0001f4 5011      	SUBI R17,LOW(1)
0001f5 c001      	RJMP _0x200004D
                 _0x200004C:
0001f6 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001f7 c001      	RJMP _0x200004E
                 _0x200004B:
0001f8 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001f9 940e 038c 	CALL SUBOPT_0x1
0001fb 5051      	SUBI R21,LOW(1)
0001fc cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001fd 2f31      	MOV  R19,R17
0001fe ff01      	SBRS R16,1
0001ff c017      	RJMP _0x200004F
                 _0x2000050:
000200 3030      	CPI  R19,0
000201 f0a1      	BREQ _0x2000052
000202 ff03      	SBRS R16,3
000203 c006      	RJMP _0x2000053
000204 81ee      	LDD  R30,Y+6
000205 81ff      	LDD  R31,Y+6+1
000206 9125      	LPM  R18,Z+
000207 83ee      	STD  Y+6,R30
000208 83ff      	STD  Y+6+1,R31
000209 c005      	RJMP _0x2000054
                 _0x2000053:
00020a 81ae      	LDD  R26,Y+6
00020b 81bf      	LDD  R27,Y+6+1
00020c 912d      	LD   R18,X+
00020d 83ae      	STD  Y+6,R26
00020e 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00020f 940e 038c 	CALL SUBOPT_0x1
000211 3050      	CPI  R21,0
000212 f009      	BREQ _0x2000055
000213 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000214 5031      	SUBI R19,LOW(1)
000215 cfea      	RJMP _0x2000050
                 _0x2000052:
000216 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000217 e320      	LDI  R18,LOW(48)
000218 81ee      	LDD  R30,Y+6
000219 81ff      	LDD  R31,Y+6+1
00021a 940e 03e1 	CALL __GETW1PF
00021c 87e8      	STD  Y+8,R30
00021d 87f9      	STD  Y+8+1,R31
00021e 81ee      	LDD  R30,Y+6
00021f 81ff      	LDD  R31,Y+6+1
000220 9632      	ADIW R30,2
000221 83ee      	STD  Y+6,R30
000222 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000223 85e8      	LDD  R30,Y+8
000224 85f9      	LDD  R31,Y+8+1
000225 85aa      	LDD  R26,Y+10
000226 85bb      	LDD  R27,Y+10+1
000227 17ae      	CP   R26,R30
000228 07bf      	CPC  R27,R31
000229 f050      	BRLO _0x200005C
00022a 5f2f      	SUBI R18,-LOW(1)
00022b 85a8      	LDD  R26,Y+8
00022c 85b9      	LDD  R27,Y+8+1
00022d 85ea      	LDD  R30,Y+10
00022e 85fb      	LDD  R31,Y+10+1
00022f 1bea      	SUB  R30,R26
000230 0bfb      	SBC  R31,R27
000231 87ea      	STD  Y+10,R30
000232 87fb      	STD  Y+10+1,R31
000233 cfef      	RJMP _0x200005A
                 _0x200005C:
000234 332a      	CPI  R18,58
000235 f028      	BRLO _0x200005D
000236 ff03      	SBRS R16,3
000237 c002      	RJMP _0x200005E
000238 5f29      	SUBI R18,-LOW(7)
000239 c001      	RJMP _0x200005F
                 _0x200005E:
00023a 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00023b fd04      	SBRC R16,4
00023c c01a      	RJMP _0x2000061
00023d 3321      	CPI  R18,49
00023e f420      	BRSH _0x2000063
00023f 85a8      	LDD  R26,Y+8
000240 85b9      	LDD  R27,Y+8+1
000241 9711      	SBIW R26,1
000242 f409      	BRNE _0x2000062
                 _0x2000063:
000243 c009      	RJMP _0x20000CD
                 _0x2000062:
000244 1753      	CP   R21,R19
000245 f010      	BRLO _0x2000067
000246 ff00      	SBRS R16,0
000247 c001      	RJMP _0x2000068
                 _0x2000067:
000248 c013      	RJMP _0x2000066
                 _0x2000068:
000249 e220      	LDI  R18,LOW(32)
00024a ff07      	SBRS R16,7
00024b c00b      	RJMP _0x2000069
00024c e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00024d 6100      	ORI  R16,LOW(16)
00024e ff02      	SBRS R16,2
00024f c007      	RJMP _0x200006A
000250 7f0b      	ANDI R16,LOW(251)
000251 934a      	ST   -Y,R20
000252 940e 0399 	CALL SUBOPT_0x3
000254 3050      	CPI  R21,0
000255 f009      	BREQ _0x200006B
000256 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000257 940e 038c 	CALL SUBOPT_0x1
000259 3050      	CPI  R21,0
00025a f009      	BREQ _0x200006C
00025b 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00025c 5031      	SUBI R19,LOW(1)
00025d 85a8      	LDD  R26,Y+8
00025e 85b9      	LDD  R27,Y+8+1
00025f 9712      	SBIW R26,2
000260 f008      	BRLO _0x2000059
000261 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000262 ff00      	SBRS R16,0
000263 c008      	RJMP _0x200006D
                 _0x200006E:
000264 3050      	CPI  R21,0
000265 f031      	BREQ _0x2000070
000266 5051      	SUBI R21,LOW(1)
000267 e2e0      	LDI  R30,LOW(32)
000268 93ea      	ST   -Y,R30
000269 940e 0399 	CALL SUBOPT_0x3
00026b cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00026c e010      	LDI  R17,LOW(0)
                 _0x200001B:
00026d cee0      	RJMP _0x2000016
                 _0x2000018:
00026e 85ac      	LDD  R26,Y+12
00026f 85bd      	LDD  R27,Y+12+1
000270 940e 03dd 	CALL __GETW1P
000272 940e 03f1 	CALL __LOADLOCR6
000274 9664      	ADIW R28,20
000275 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000276 92ff      	PUSH R15
000277 2ef8      	MOV  R15,R24
000278 9726      	SBIW R28,6
000279 940e 03ec 	CALL __SAVELOCR4
00027b 940e 03b1 	CALL SUBOPT_0x6
00027d 9730      	SBIW R30,0
00027e f419      	BRNE _0x2000072
00027f efef      	LDI  R30,LOW(65535)
000280 efff      	LDI  R31,HIGH(65535)
000281 c023      	RJMP _0x20C0002
                 _0x2000072:
000282 01de      	MOVW R26,R28
000283 9616      	ADIW R26,6
000284 940e 03d0 	CALL __ADDW2R15
000286 018d      	MOVW R16,R26
000287 940e 03b1 	CALL SUBOPT_0x6
000289 83ee      	STD  Y+6,R30
00028a 83ff      	STD  Y+6+1,R31
00028b e0e0      	LDI  R30,LOW(0)
00028c 87e8      	STD  Y+8,R30
00028d 87e9      	STD  Y+8+1,R30
00028e 01de      	MOVW R26,R28
00028f 961a      	ADIW R26,10
000290 940e 03d0 	CALL __ADDW2R15
000292 940e 03dd 	CALL __GETW1P
000294 93fa      	ST   -Y,R31
000295 93ea      	ST   -Y,R30
000296 931a      	ST   -Y,R17
000297 930a      	ST   -Y,R16
000298 e0e2      	LDI  R30,LOW(_put_buff_G100)
000299 e0f1      	LDI  R31,HIGH(_put_buff_G100)
00029a 93fa      	ST   -Y,R31
00029b 93ea      	ST   -Y,R30
00029c 01de      	MOVW R26,R28
00029d 961a      	ADIW R26,10
00029e dea3      	RCALL __print_G100
00029f 019f      	MOVW R18,R30
0002a0 81ae      	LDD  R26,Y+6
0002a1 81bf      	LDD  R27,Y+6+1
0002a2 e0e0      	LDI  R30,LOW(0)
0002a3 93ec      	ST   X,R30
0002a4 01f9      	MOVW R30,R18
                 _0x20C0002:
0002a5 940e 03f3 	CALL __LOADLOCR4
0002a7 962a      	ADIW R28,10
0002a8 90ff      	POP  R15
0002a9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
0002aa 93aa      	ST   -Y,R26
0002ab 81e8      	LD   R30,Y
0002ac 71e0      	ANDI R30,LOW(0x10)
0002ad f011      	BREQ _0x2040004
0002ae 9adb      	SBI  0x1B,3
0002af c001      	RJMP _0x2040005
                 _0x2040004:
0002b0 98db      	CBI  0x1B,3
                 _0x2040005:
0002b1 81e8      	LD   R30,Y
0002b2 72e0      	ANDI R30,LOW(0x20)
0002b3 f011      	BREQ _0x2040006
0002b4 9adc      	SBI  0x1B,4
0002b5 c001      	RJMP _0x2040007
                 _0x2040006:
0002b6 98dc      	CBI  0x1B,4
                 _0x2040007:
0002b7 81e8      	LD   R30,Y
0002b8 74e0      	ANDI R30,LOW(0x40)
0002b9 f011      	BREQ _0x2040008
0002ba 9add      	SBI  0x1B,5
0002bb c001      	RJMP _0x2040009
                 _0x2040008:
0002bc 98dd      	CBI  0x1B,5
                 _0x2040009:
0002bd 81e8      	LD   R30,Y
0002be 78e0      	ANDI R30,LOW(0x80)
0002bf f011      	BREQ _0x204000A
0002c0 9ade      	SBI  0x1B,6
0002c1 c001      	RJMP _0x204000B
                 _0x204000A:
0002c2 98de      	CBI  0x1B,6
                 _0x204000B:
                +
0002c3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002c4 958a     +DEC R24
0002c5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002c6 9ada      	SBI  0x1B,2
                +
0002c7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002c8 958a     +DEC R24
0002c9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002ca 98da      	CBI  0x1B,2
                +
0002cb e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0002cc 958a     +DEC R24
0002cd f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0002ce c078      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002cf 93aa      	ST   -Y,R26
0002d0 81a8      	LD   R26,Y
0002d1 dfd8      	RCALL __lcd_write_nibble_G102
0002d2 81e8          ld    r30,y
0002d3 95e2          swap  r30
0002d4 83e8          st    y,r30
0002d5 81a8      	LD   R26,Y
0002d6 dfd3      	RCALL __lcd_write_nibble_G102
                +
0002d7 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0002d8 958a     +DEC R24
0002d9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0002da c06c      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002db 93aa      	ST   -Y,R26
0002dc 81e8      	LD   R30,Y
0002dd e0f0      	LDI  R31,0
0002de 5dea      	SUBI R30,LOW(-__base_y_G102)
0002df 4ffa      	SBCI R31,HIGH(-__base_y_G102)
0002e0 81e0      	LD   R30,Z
0002e1 81a9      	LDD  R26,Y+1
0002e2 0fae      	ADD  R26,R30
0002e3 dfeb      	RCALL __lcd_write_data
0002e4 8059      	LDD  R5,Y+1
0002e5 8048      	LDD  R4,Y+0
0002e6 9622      	ADIW R28,2
0002e7 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002e8 e0a2      	LDI  R26,LOW(2)
0002e9 940e 03b8 	CALL SUBOPT_0x7
0002eb e0ac      	LDI  R26,LOW(12)
0002ec dfe2      	RCALL __lcd_write_data
0002ed e0a1      	LDI  R26,LOW(1)
0002ee 940e 03b8 	CALL SUBOPT_0x7
0002f0 e0e0      	LDI  R30,LOW(0)
0002f1 2e4e      	MOV  R4,R30
0002f2 2e5e      	MOV  R5,R30
0002f3 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002f4 93aa      	ST   -Y,R26
0002f5 81a8      	LD   R26,Y
0002f6 30aa      	CPI  R26,LOW(0xA)
0002f7 f011      	BREQ _0x2040011
0002f8 1457      	CP   R5,R7
0002f9 f048      	BRLO _0x2040010
                 _0x2040011:
0002fa e0e0      	LDI  R30,LOW(0)
0002fb 93ea      	ST   -Y,R30
0002fc 9443      	INC  R4
0002fd 2da4      	MOV  R26,R4
0002fe dfdc      	RCALL _lcd_gotoxy
0002ff 81a8      	LD   R26,Y
000300 30aa      	CPI  R26,LOW(0xA)
000301 f409      	BRNE _0x2040013
000302 c044      	RJMP _0x20C0001
                 _0x2040013:
                 _0x2040010:
000303 9453      	INC  R5
000304 9ad8      	SBI  0x1B,0
000305 81a8      	LD   R26,Y
000306 dfc8      	RCALL __lcd_write_data
000307 98d8      	CBI  0x1B,0
000308 c03e      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000309 93ba      	ST   -Y,R27
00030a 93aa      	ST   -Y,R26
00030b 931a      	ST   -Y,R17
                 _0x2040014:
00030c 81a9      	LDD  R26,Y+1
00030d 81ba      	LDD  R27,Y+1+1
00030e 91ed      	LD   R30,X+
00030f 83a9      	STD  Y+1,R26
000310 83ba      	STD  Y+1+1,R27
000311 2f1e      	MOV  R17,R30
000312 30e0      	CPI  R30,0
000313 f019      	BREQ _0x2040016
000314 2fa1      	MOV  R26,R17
000315 dfde      	RCALL _lcd_putchar
000316 cff5      	RJMP _0x2040014
                 _0x2040016:
000317 8118      	LDD  R17,Y+0
000318 9623      	ADIW R28,3
000319 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00031a 93aa      	ST   -Y,R26
00031b 9ad3      	SBI  0x1A,3
00031c 9ad4      	SBI  0x1A,4
00031d 9ad5      	SBI  0x1A,5
00031e 9ad6      	SBI  0x1A,6
00031f 9ad2      	SBI  0x1A,2
000320 9ad0      	SBI  0x1A,0
000321 9ad1      	SBI  0x1A,1
000322 98da      	CBI  0x1B,2
000323 98d8      	CBI  0x1B,0
000324 98d9      	CBI  0x1B,1
000325 8078      	LDD  R7,Y+0
000326 81e8      	LD   R30,Y
000327 58e0      	SUBI R30,-LOW(128)
                +
000328 93e0 0528+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
00032a 81e8      	LD   R30,Y
00032b 54e0      	SUBI R30,-LOW(192)
                +
00032c 93e0 0529+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
00032e e1a4      	LDI  R26,LOW(20)
00032f e0b0      	LDI  R27,0
000330 940e 03c6 	CALL _delay_ms
000332 940e 03be 	CALL SUBOPT_0x8
000334 940e 03be 	CALL SUBOPT_0x8
000336 940e 03be 	CALL SUBOPT_0x8
000338 e2a0      	LDI  R26,LOW(32)
000339 df70      	RCALL __lcd_write_nibble_G102
                +
00033a ec88     +LDI R24 , LOW ( 200 )
00033b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00033c 9701     +SBIW R24 , 1
00033d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00033e e2a8      	LDI  R26,LOW(40)
00033f df8f      	RCALL __lcd_write_data
000340 e0a4      	LDI  R26,LOW(4)
000341 df8d      	RCALL __lcd_write_data
000342 e8a5      	LDI  R26,LOW(133)
000343 df8b      	RCALL __lcd_write_data
000344 e0a6      	LDI  R26,LOW(6)
000345 df89      	RCALL __lcd_write_data
000346 dfa1      	RCALL _lcd_clear
                 _0x20C0001:
000347 9621      	ADIW R28,1
000348 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000349 93ba      	ST   -Y,R27
00034a 93aa      	ST   -Y,R26
00034b 91a9          ld   r26,y+
00034c 91b9          ld   r27,y+
00034d 27ee          clr  r30
00034e 27ff          clr  r31
                 strlen0:
00034f 916d          ld   r22,x+
000350 2366          tst  r22
000351 f011          breq strlen1
000352 9631          adiw r30,1
000353 cffb          rjmp strlen0
                 strlen1:
000354 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000355 93ba      	ST   -Y,R27
000356 93aa      	ST   -Y,R26
000357 27aa          clr  r26
000358 27bb          clr  r27
000359 91e9          ld   r30,y+
00035a 91f9          ld   r31,y+
                 strlenf0:
00035b 9005      	lpm  r0,z+
00035c 2000          tst  r0
00035d f011          breq strlenf1
00035e 9611          adiw r26,1
00035f cffb          rjmp strlenf0
                 strlenf1:
000360 01fd          movw r30,r26
000361 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
000500           	.BYTE 0x12
                 _data:
000512           	.BYTE 0x10
                 __seed_G101:
000522           	.BYTE 0x4
                 __base_y_G102:
000526           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:77 WORDS
                 SUBOPT_0x0:
000362 e0a0      	LDI  R26,LOW(0)
000363 940e 02db 	CALL _lcd_gotoxy
000365 e1e2      	LDI  R30,LOW(_data)
000366 e0f5      	LDI  R31,HIGH(_data)
000367 93fa      	ST   -Y,R31
000368 93ea      	ST   -Y,R30
                +
000369 ebe0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00036a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00036b 93fa      	ST   -Y,R31
00036c 93ea      	ST   -Y,R30
                +
00036d e0a6     +LDI R26 , 6
00036e 9fa2     +MUL R26 , R18
00036f 01f0     +MOVW R30 , R0
000370 9fa3     +MUL R26 , R19
000371 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,6
000372 50e0      	SUBI R30,LOW(-_keypad)
000373 4ffb      	SBCI R31,HIGH(-_keypad)
000374 01df      	MOVW R26,R30
000375 01fa      	MOVW R30,R20
000376 0fee      	LSL  R30
000377 1fff      	ROL  R31
000378 0fae      	ADD  R26,R30
000379 1fbf      	ADC  R27,R31
00037a 940e 03dd 	CALL __GETW1P
00037c 940e 03d8 	CALL __CWD1
00037e 940e 03e5 	CALL __PUTPARD1
000380 e084      	LDI  R24,4
000381 940e 0276 	CALL _sprintf
000383 9628      	ADIW R28,8
000384 e1a2      	LDI  R26,LOW(_data)
000385 e0b5      	LDI  R27,HIGH(_data)
000386 940e 0309 	CALL _lcd_puts
000388 efa4      	LDI  R26,LOW(500)
000389 e0b1      	LDI  R27,HIGH(500)
00038a 940c 03c6 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
00038c 932a      	ST   -Y,R18
00038d 85ad      	LDD  R26,Y+13
00038e 85be      	LDD  R27,Y+13+1
00038f 85ef      	LDD  R30,Y+15
000390 89f8      	LDD  R31,Y+15+1
000391 9509      	ICALL
000392 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
000393 89e8      	LDD  R30,Y+16
000394 89f9      	LDD  R31,Y+16+1
000395 9734      	SBIW R30,4
000396 8be8      	STD  Y+16,R30
000397 8bf9      	STD  Y+16+1,R31
000398 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000399 85ad      	LDD  R26,Y+13
00039a 85be      	LDD  R27,Y+13+1
00039b 85ef      	LDD  R30,Y+15
00039c 89f8      	LDD  R31,Y+15+1
00039d 9509      	ICALL
00039e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
00039f 89a8      	LDD  R26,Y+16
0003a0 89b9      	LDD  R27,Y+16+1
0003a1 9614      	ADIW R26,4
0003a2 940e 03dd 	CALL __GETW1P
0003a4 83ee      	STD  Y+6,R30
0003a5 83ff      	STD  Y+6+1,R31
0003a6 81ae      	LDD  R26,Y+6
0003a7 81bf      	LDD  R27,Y+6+1
0003a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0003a9 89a8      	LDD  R26,Y+16
0003aa 89b9      	LDD  R27,Y+16+1
0003ab 9614      	ADIW R26,4
0003ac 940e 03dd 	CALL __GETW1P
0003ae 87ea      	STD  Y+10,R30
0003af 87fb      	STD  Y+10+1,R31
0003b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0003b1 01de      	MOVW R26,R28
0003b2 961c      	ADIW R26,12
0003b3 940e 03d0 	CALL __ADDW2R15
0003b5 940e 03dd 	CALL __GETW1P
0003b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003b8 940e 02cf 	CALL __lcd_write_data
0003ba e0a3      	LDI  R26,LOW(3)
0003bb e0b0      	LDI  R27,0
0003bc 940c 03c6 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0003be e3a0      	LDI  R26,LOW(48)
0003bf 940e 02aa 	CALL __lcd_write_nibble_G102
                +
0003c1 ec88     +LDI R24 , LOW ( 200 )
0003c2 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003c3 9701     +SBIW R24 , 1
0003c4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003c5 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003c6 9610      	adiw r26,0
0003c7 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003c8 ed80     +LDI R24 , LOW ( 0x7D0 )
0003c9 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003ca 9701     +SBIW R24 , 1
0003cb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003cc 95a8      	wdr
0003cd 9711      	sbiw r26,1
0003ce f7c9      	brne __delay_ms0
                 __delay_ms1:
0003cf 9508      	ret
                 
                 __ADDW2R15:
0003d0 2400      	CLR  R0
0003d1 0daf      	ADD  R26,R15
0003d2 1db0      	ADC  R27,R0
0003d3 9508      	RET
                 
                 __ANEGW1:
0003d4 95f1      	NEG  R31
0003d5 95e1      	NEG  R30
0003d6 40f0      	SBCI R31,0
0003d7 9508      	RET
                 
                 __CWD1:
0003d8 2f6f      	MOV  R22,R31
0003d9 0f66      	ADD  R22,R22
0003da 0b66      	SBC  R22,R22
0003db 2f76      	MOV  R23,R22
0003dc 9508      	RET
                 
                 __GETW1P:
0003dd 91ed      	LD   R30,X+
0003de 91fc      	LD   R31,X
0003df 9711      	SBIW R26,1
0003e0 9508      	RET
                 
                 __GETW1PF:
0003e1 9005      	LPM  R0,Z+
0003e2 91f4      	LPM  R31,Z
0003e3 2de0      	MOV  R30,R0
0003e4 9508      	RET
                 
                 __PUTPARD1:
0003e5 937a      	ST   -Y,R23
0003e6 936a      	ST   -Y,R22
0003e7 93fa      	ST   -Y,R31
0003e8 93ea      	ST   -Y,R30
0003e9 9508      	RET
                 
                 __SAVELOCR6:
0003ea 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003eb 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003ec 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003ed 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003ee 931a      	ST   -Y,R17
0003ef 930a      	ST   -Y,R16
0003f0 9508      	RET
                 
                 __LOADLOCR6:
0003f1 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003f2 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003f3 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003f4 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003f5 8119      	LDD  R17,Y+1
0003f6 8108      	LD   R16,Y
0003f7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  17 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  30 r18:  38 r19:  15 r20:  16 r21:  23 r22:  11 r23:   2 
r24:  24 r25:   5 r26: 101 r27:  40 r28:  15 r29:   1 r30: 185 r31:  70 
x  :  23 y  : 171 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   6 
adiw  :  25 and   :   0 andi  :  11 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  24 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   1 brne  :  36 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  59 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   8 cpc   :   8 cpi   :  38 cpse  :   0 dec   :   5 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   3 inc   :   2 jmp   :  38 ld    :  28 ldd   :  77 
ldi   : 110 lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  23 
movw  :  17 mul   :   3 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   2 ori   :   6 out   :   8 pop   :   1 push  :   1 rcall :  15 
ret   :  26 reti  :   0 rjmp  :  66 rol   :   1 ror   :   0 sbc   :   2 
sbci  :   5 sbi   :  13 sbic  :   0 sbis  :   0 sbiw  :  19 sbr   :   0 
sbrc  :   2 sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  61 std   :  31 sts   :   8 sub   :   1 subi  :  19 
swap  :   1 tst   :   4 wdr   :   1 
Instructions used: 56 out of 117 (47.9%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007f0   1958     74   2032  131072   1.6%
[.dseg] 0x000100 0x00052a      0     42     42    4096   1.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 7 warnings
