;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <stdlib.h>
;#include <stdio.h>
;
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;
;unsigned char buffer[15];
;unsigned int threshold=485,count=0;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input){
; 0000 000D unsigned int read_adc(unsigned char adc_input){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000E     ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 000F     // Delay needed for the stabilization of the ADC input voltage
; 0000 0010     delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 0011     // Start the AD conversion
; 0000 0012     ADCSRA|=(1<<ADSC);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0013     // Wait for the AD conversion to complete
; 0000 0014     while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0015     ADCSRA|=(1<<ADIF);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0016 
; 0000 0017     return ADCW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0018 }
;PCODE: $00000021 VOL: 0
;
;
;void render(){
; 0000 001B void render(){
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001C     lcd_clear();
;PCODE: $00000024 VOL: 0
; 0000 001D     sprintf(buffer,"Value: %u",read_adc(0));
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 001E     lcd_gotoxy(0,0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 001F     lcd_puts(buffer);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0020     sprintf(buffer,"Threshold: %u",threshold);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0021     lcd_gotoxy(0,1);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0022     lcd_puts(buffer);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0023 }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
; 0000 0025 interrupt [17] void timer0_ovf_isr(void){
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0026     TCNT0=0x06;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0027     if(++count > 300){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0028       count=0,render();
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0029       if(read_adc(0) < threshold)PORTC.3 = 1;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 002A       else PORTC.3 = 0;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 002B     }
;PCODE: $00000061 VOL: 0
; 0000 002C }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;
;void main(void){
; 0000 002F void main(void){
;PCODE: $00000066 VOL: 0
; 0000 0030     ASSR=0<<AS0;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0031     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0032     TCNT0=0x06;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0033     OCR0=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0034 
; 0000 0035     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0036     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0037 
; 0000 0038     ADMUX=ADC_VREF_TYPE;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0039     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 003A     SFIOR=(0<<ACME);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 003B 
; 0000 003C     DDRC.3 = 1;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 003D     PORTC.3 = 0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 003E 
; 0000 003F     lcd_init(16);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0040     #asm("sei")
;PCODE: $0000007F VOL: 0
	sei
;PCODE: $00000080 VOL: 0
; 0000 0041     while (1){
;PCODE: $00000081 VOL: 0
; 0000 0042 
; 0000 0043     }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0044 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
