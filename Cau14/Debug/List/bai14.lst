
AVRASM ver. 2.1.30  E:\KTMT\cuoi ki\bai14\Debug\List\bai14.asm Sun Jan 16 12:50:29 2022

E:\KTMT\cuoi ki\bai14\Debug\List\bai14.asm(1090): warning: Register r4 already defined by the .DEF directive
E:\KTMT\cuoi ki\bai14\Debug\List\bai14.asm(1091): warning: Register r5 already defined by the .DEF directive
E:\KTMT\cuoi ki\bai14\Debug\List\bai14.asm(1092): warning: Register r6 already defined by the .DEF directive
E:\KTMT\cuoi ki\bai14\Debug\List\bai14.asm(1093): warning: Register r7 already defined by the .DEF directive
E:\KTMT\cuoi ki\bai14\Debug\List\bai14.asm(1094): warning: Register r9 already defined by the .DEF directive
E:\KTMT\cuoi ki\bai14\Debug\List\bai14.asm(1095): warning: Register r8 already defined by the .DEF directive
E:\KTMT\cuoi ki\bai14\Debug\List\bai14.asm(1096): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128A
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128A
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _threshold=R4
                 	.DEF _threshold_msb=R5
                 	.DEF _count=R6
                 	.DEF _count_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 00ca 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 01e5
000050 0000      	.DB  0xE5,0x1,0x0,0x0
                 
                 _0x0:
000051 6156
000052 756c
000053 3a65
000054 2520      	.DB  0x56,0x61,0x6C,0x75,0x65,0x3A,0x20,0x25
000055 0075
000056 6854
000057 6572
000058 6873      	.DB  0x75,0x0,0x54,0x68,0x72,0x65,0x73,0x68
000059 6c6f
00005a 3a64
00005b 2520
00005c 0075      	.DB  0x6F,0x6C,0x64,0x3A,0x20,0x25,0x75,0x0
                 _0x2000003:
00005d c080      	.DB  0x80,0xC0
                 _0x2020060:
E:\KTMT\cuoi ki\bai14\Debug\List\bai14.asm(1158): warning: .cseg .db misalignment - padding zero byte
00005e 0001      	.DB  0x1
                 _0x2020000:
00005f 4e2d
000060 4e41
000061 4900
000062 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\KTMT\cuoi ki\bai14\Debug\List\bai14.asm(1161): warning: .cseg .db misalignment - padding zero byte
000063 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000064 0004      	.DW  0x04
000065 0004      	.DW  0x04
000066 009e      	.DW  __REG_VARS*2
                 
000067 0002      	.DW  0x02
000068 050f      	.DW  __base_y_G100
000069 00ba      	.DW  _0x2000003*2
                 
00006a 0001      	.DW  0x01
00006b 0513      	.DW  __seed_G101
00006c 00bc      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
00006d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006e 94f8      	CLI
00006f 27ee      	CLR  R30
000070 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000071 e0f1      	LDI  R31,1
000072 bff5      	OUT  MCUCR,R31
000073 bfe5      	OUT  MCUCR,R30
000074 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000076 e08d      	LDI  R24,(14-2)+1
000077 e0a2      	LDI  R26,2
000078 27bb      	CLR  R27
                 __CLEAR_REG:
000079 93ed      	ST   X+,R30
00007a 958a      	DEC  R24
00007b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007d e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007e e0a0      	LDI  R26,LOW(__SRAM_START)
00007f e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
000080 93ed      	ST   X+,R30
000081 9701      	SBIW R24,1
000082 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000083 ece8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000084 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000085 9185      	LPM  R24,Z+
000086 9195      	LPM  R25,Z+
000087 9700      	SBIW R24,0
000088 f061      	BREQ __GLOBAL_INI_END
000089 91a5      	LPM  R26,Z+
00008a 91b5      	LPM  R27,Z+
00008b 9005      	LPM  R0,Z+
00008c 9015      	LPM  R1,Z+
00008d 01bf      	MOVW R22,R30
00008e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008f 9005      	LPM  R0,Z+
000090 920d      	ST   X+,R0
000091 9701      	SBIW R24,1
000092 f7e1      	BRNE __GLOBAL_INI_LOOP
000093 01fb      	MOVW R30,R22
000094 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000095 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000096 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000097 bfed      	OUT  SPL,R30
000098 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000099 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009a e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00009b e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009c 940c 00f9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;unsigned char buffer[15];
                 ;unsigned int threshold=485,count=0;
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input){
                 ; 0000 000D unsigned int read_adc(unsigned char adc_input){
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 000E     ADMUX=adc_input | ADC_VREF_TYPE;
00009e 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00009f 81e8      	LD   R30,Y
0000a0 b9e7      	OUT  0x7,R30
                 ; 0000 000F     // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0010     delay_us(10);
                +
0000a1 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
0000a2 958a     +DEC R24
0000a3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0011     // Start the AD conversion
                 ; 0000 0012     ADCSRA|=(1<<ADSC);
0000a4 9a36      	SBI  0x6,6
                 ; 0000 0013     // Wait for the AD conversion to complete
                 ; 0000 0014     while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
0000a5 9b34      	SBIS 0x6,4
0000a6 cffe      	RJMP _0x3
                 ; 0000 0015     ADCSRA|=(1<<ADIF);
0000a7 9a34      	SBI  0x6,4
                 ; 0000 0016 
                 ; 0000 0017     return ADCW;
0000a8 b1e4      	IN   R30,0x4
0000a9 b1f5      	IN   R31,0x4+1
0000aa c104      	RJMP _0x20C0002
                 ; 0000 0018 }
                 ; .FEND
                 ;
                 ;
                 ;void render(){
                 ; 0000 001B void render(){
                 _render:
                 ; .FSTART _render
                 ; 0000 001C     lcd_clear();
0000ab d0a4      	RCALL _lcd_clear
                 ; 0000 001D     sprintf(buffer,"Value: %u",read_adc(0));
0000ac e0e0      	LDI  R30,LOW(_buffer)
0000ad e0f5      	LDI  R31,HIGH(_buffer)
0000ae 93fa      	ST   -Y,R31
0000af 93ea      	ST   -Y,R30
                +
0000b0 eae2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000b1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000b2 93fa      	ST   -Y,R31
0000b3 93ea      	ST   -Y,R30
0000b4 e0a0      	LDI  R26,LOW(0)
0000b5 dfe8      	RCALL _read_adc
0000b6 940e 0372 	CALL SUBOPT_0x0
                 ; 0000 001E     lcd_gotoxy(0,0);
0000b8 e0a0      	LDI  R26,LOW(0)
0000b9 940e 037d 	CALL SUBOPT_0x1
                 ; 0000 001F     lcd_puts(buffer);
                 ; 0000 0020     sprintf(buffer,"Threshold: %u",threshold);
0000bb e0e0      	LDI  R30,LOW(_buffer)
0000bc e0f5      	LDI  R31,HIGH(_buffer)
0000bd 93fa      	ST   -Y,R31
0000be 93ea      	ST   -Y,R30
                +
0000bf eaec     +LDI R30 , LOW ( 2 * _0x0 + ( 10 ) )
0000c0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 10 ) )
                 	__POINTW1FN _0x0,10
0000c1 93fa      	ST   -Y,R31
0000c2 93ea      	ST   -Y,R30
0000c3 01f2      	MOVW R30,R4
0000c4 940e 0372 	CALL SUBOPT_0x0
                 ; 0000 0021     lcd_gotoxy(0,1);
0000c6 e0a1      	LDI  R26,LOW(1)
0000c7 940e 037d 	CALL SUBOPT_0x1
                 ; 0000 0022     lcd_puts(buffer);
                 ; 0000 0023 }
0000c9 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
                 ; 0000 0025 interrupt [17] void timer0_ovf_isr(void){
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000ca 920a      	ST   -Y,R0
0000cb 921a      	ST   -Y,R1
0000cc 92fa      	ST   -Y,R15
0000cd 936a      	ST   -Y,R22
0000ce 937a      	ST   -Y,R23
0000cf 938a      	ST   -Y,R24
0000d0 939a      	ST   -Y,R25
0000d1 93aa      	ST   -Y,R26
0000d2 93ba      	ST   -Y,R27
0000d3 93ea      	ST   -Y,R30
0000d4 93fa      	ST   -Y,R31
0000d5 b7ef      	IN   R30,SREG
0000d6 93ea      	ST   -Y,R30
                 ; 0000 0026     TCNT0=0x06;
0000d7 e0e6      	LDI  R30,LOW(6)
0000d8 bfe2      	OUT  0x32,R30
                 ; 0000 0027     if(++count > 300){
0000d9 01f3      	MOVW R30,R6
0000da 9631      	ADIW R30,1
0000db 013f      	MOVW R6,R30
0000dc 32ed      	CPI  R30,LOW(0x12D)
0000dd e0a1      	LDI  R26,HIGH(0x12D)
0000de 07fa      	CPC  R31,R26
0000df f058      	BRLO _0x6
                 ; 0000 0028       count=0,render();
0000e0 2466      	CLR  R6
0000e1 2477      	CLR  R7
0000e2 dfc8      	RCALL _render
                 ; 0000 0029       if(read_adc(0) < threshold)PORTC.3 = 1;
0000e3 e0a0      	LDI  R26,LOW(0)
0000e4 dfb9      	RCALL _read_adc
0000e5 15e4      	CP   R30,R4
0000e6 05f5      	CPC  R31,R5
0000e7 f410      	BRSH _0x7
0000e8 9aab      	SBI  0x15,3
                 ; 0000 002A       else PORTC.3 = 0;
0000e9 c001      	RJMP _0xA
                 _0x7:
0000ea 98ab      	CBI  0x15,3
                 ; 0000 002B     }
                 _0xA:
                 ; 0000 002C }
                 _0x6:
0000eb 91e9      	LD   R30,Y+
0000ec bfef      	OUT  SREG,R30
0000ed 91f9      	LD   R31,Y+
0000ee 91e9      	LD   R30,Y+
0000ef 91b9      	LD   R27,Y+
0000f0 91a9      	LD   R26,Y+
0000f1 9199      	LD   R25,Y+
0000f2 9189      	LD   R24,Y+
0000f3 9179      	LD   R23,Y+
0000f4 9169      	LD   R22,Y+
0000f5 90f9      	LD   R15,Y+
0000f6 9019      	LD   R1,Y+
0000f7 9009      	LD   R0,Y+
0000f8 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void main(void){
                 ; 0000 002F void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 0030     ASSR=0<<AS0;
0000f9 e0e0      	LDI  R30,LOW(0)
0000fa bfe0      	OUT  0x30,R30
                 ; 0000 0031     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
0000fb e0e3      	LDI  R30,LOW(3)
0000fc bfe3      	OUT  0x33,R30
                 ; 0000 0032     TCNT0=0x06;
0000fd e0e6      	LDI  R30,LOW(6)
0000fe bfe2      	OUT  0x32,R30
                 ; 0000 0033     OCR0=0x00;
0000ff e0e0      	LDI  R30,LOW(0)
000100 bfe1      	OUT  0x31,R30
                 ; 0000 0034 
                 ; 0000 0035     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000101 e0e1      	LDI  R30,LOW(1)
000102 bfe7      	OUT  0x37,R30
                 ; 0000 0036     ETIMSK=(0<<TICIE3) | (0<<OCIE3A) | (0<<OCIE3B) | (0<<TOIE3) | (0<<OCIE3C) | (0<<OCIE1C);
000103 e0e0      	LDI  R30,LOW(0)
000104 93e0 007d 	STS  125,R30
                 ; 0000 0037 
                 ; 0000 0038     ADMUX=ADC_VREF_TYPE;
000106 b9e7      	OUT  0x7,R30
                 ; 0000 0039     ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000107 e8e3      	LDI  R30,LOW(131)
000108 b9e6      	OUT  0x6,R30
                 ; 0000 003A     SFIOR=(0<<ACME);
000109 e0e0      	LDI  R30,LOW(0)
00010a bde0      	OUT  0x20,R30
                 ; 0000 003B 
                 ; 0000 003C     DDRC.3 = 1;
00010b 9aa3      	SBI  0x14,3
                 ; 0000 003D     PORTC.3 = 0;
00010c 98ab      	CBI  0x15,3
                 ; 0000 003E 
                 ; 0000 003F     lcd_init(16);
00010d e1a0      	LDI  R26,LOW(16)
00010e d073      	RCALL _lcd_init
                 ; 0000 0040     #asm("sei")
00010f 9478      	sei
                 ; 0000 0041     while (1){
                 _0x11:
                 ; 0000 0042 
                 ; 0000 0043     }
000110 cfff      	RJMP _0x11
                 ; 0000 0044 }
                 _0x14:
000111 cfff      	RJMP _0x14
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000112 93aa      	ST   -Y,R26
000113 81e8      	LD   R30,Y
000114 71e0      	ANDI R30,LOW(0x10)
000115 f011      	BREQ _0x2000004
000116 9adb      	SBI  0x1B,3
000117 c001      	RJMP _0x2000005
                 _0x2000004:
000118 98db      	CBI  0x1B,3
                 _0x2000005:
000119 81e8      	LD   R30,Y
00011a 72e0      	ANDI R30,LOW(0x20)
00011b f011      	BREQ _0x2000006
00011c 9adc      	SBI  0x1B,4
00011d c001      	RJMP _0x2000007
                 _0x2000006:
00011e 98dc      	CBI  0x1B,4
                 _0x2000007:
00011f 81e8      	LD   R30,Y
000120 74e0      	ANDI R30,LOW(0x40)
000121 f011      	BREQ _0x2000008
000122 9add      	SBI  0x1B,5
000123 c001      	RJMP _0x2000009
                 _0x2000008:
000124 98dd      	CBI  0x1B,5
                 _0x2000009:
000125 81e8      	LD   R30,Y
000126 78e0      	ANDI R30,LOW(0x80)
000127 f011      	BREQ _0x200000A
000128 9ade      	SBI  0x1B,6
000129 c001      	RJMP _0x200000B
                 _0x200000A:
00012a 98de      	CBI  0x1B,6
                 _0x200000B:
                +
00012b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00012c 958a     +DEC R24
00012d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00012e 9ada      	SBI  0x1B,2
                +
00012f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000130 958a     +DEC R24
000131 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000132 98da      	CBI  0x1B,2
                +
000133 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000134 958a     +DEC R24
000135 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000136 c078      	RJMP _0x20C0002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000137 93aa      	ST   -Y,R26
000138 81a8      	LD   R26,Y
000139 dfd8      	RCALL __lcd_write_nibble_G100
00013a 81e8          ld    r30,y
00013b 95e2          swap  r30
00013c 83e8          st    y,r30
00013d 81a8      	LD   R26,Y
00013e dfd3      	RCALL __lcd_write_nibble_G100
                +
00013f e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000140 958a     +DEC R24
000141 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000142 c06c      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000143 93aa      	ST   -Y,R26
000144 81e8      	LD   R30,Y
000145 e0f0      	LDI  R31,0
000146 5fe1      	SUBI R30,LOW(-__base_y_G100)
000147 4ffa      	SBCI R31,HIGH(-__base_y_G100)
000148 81e0      	LD   R30,Z
000149 81a9      	LDD  R26,Y+1
00014a 0fae      	ADD  R26,R30
00014b dfeb      	RCALL __lcd_write_data
00014c 8099      	LDD  R9,Y+1
00014d 8088      	LDD  R8,Y+0
00014e 9622      	ADIW R28,2
00014f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000150 e0a2      	LDI  R26,LOW(2)
000151 940e 0383 	CALL SUBOPT_0x2
000153 e0ac      	LDI  R26,LOW(12)
000154 dfe2      	RCALL __lcd_write_data
000155 e0a1      	LDI  R26,LOW(1)
000156 940e 0383 	CALL SUBOPT_0x2
000158 e0e0      	LDI  R30,LOW(0)
000159 2e8e      	MOV  R8,R30
00015a 2e9e      	MOV  R9,R30
00015b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00015c 93aa      	ST   -Y,R26
00015d 81a8      	LD   R26,Y
00015e 30aa      	CPI  R26,LOW(0xA)
00015f f011      	BREQ _0x2000011
000160 149b      	CP   R9,R11
000161 f048      	BRLO _0x2000010
                 _0x2000011:
000162 e0e0      	LDI  R30,LOW(0)
000163 93ea      	ST   -Y,R30
000164 9483      	INC  R8
000165 2da8      	MOV  R26,R8
000166 dfdc      	RCALL _lcd_gotoxy
000167 81a8      	LD   R26,Y
000168 30aa      	CPI  R26,LOW(0xA)
000169 f409      	BRNE _0x2000013
00016a c044      	RJMP _0x20C0002
                 _0x2000013:
                 _0x2000010:
00016b 9493      	INC  R9
00016c 9ad8      	SBI  0x1B,0
00016d 81a8      	LD   R26,Y
00016e dfc8      	RCALL __lcd_write_data
00016f 98d8      	CBI  0x1B,0
000170 c03e      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000171 93ba      	ST   -Y,R27
000172 93aa      	ST   -Y,R26
000173 931a      	ST   -Y,R17
                 _0x2000014:
000174 81a9      	LDD  R26,Y+1
000175 81ba      	LDD  R27,Y+1+1
000176 91ed      	LD   R30,X+
000177 83a9      	STD  Y+1,R26
000178 83ba      	STD  Y+1+1,R27
000179 2f1e      	MOV  R17,R30
00017a 30e0      	CPI  R30,0
00017b f019      	BREQ _0x2000016
00017c 2fa1      	MOV  R26,R17
00017d dfde      	RCALL _lcd_putchar
00017e cff5      	RJMP _0x2000014
                 _0x2000016:
00017f 8118      	LDD  R17,Y+0
000180 9623      	ADIW R28,3
000181 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000182 93aa      	ST   -Y,R26
000183 9ad3      	SBI  0x1A,3
000184 9ad4      	SBI  0x1A,4
000185 9ad5      	SBI  0x1A,5
000186 9ad6      	SBI  0x1A,6
000187 9ad2      	SBI  0x1A,2
000188 9ad0      	SBI  0x1A,0
000189 9ad1      	SBI  0x1A,1
00018a 98da      	CBI  0x1B,2
00018b 98d8      	CBI  0x1B,0
00018c 98d9      	CBI  0x1B,1
00018d 80b8      	LDD  R11,Y+0
00018e 81e8      	LD   R30,Y
00018f 58e0      	SUBI R30,-LOW(128)
                +
000190 93e0 0511+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000192 81e8      	LD   R30,Y
000193 54e0      	SUBI R30,-LOW(192)
                +
000194 93e0 0512+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000196 e1a4      	LDI  R26,LOW(20)
000197 e0b0      	LDI  R27,0
000198 940e 03bd 	CALL _delay_ms
00019a 940e 0389 	CALL SUBOPT_0x3
00019c 940e 0389 	CALL SUBOPT_0x3
00019e 940e 0389 	CALL SUBOPT_0x3
0001a0 e2a0      	LDI  R26,LOW(32)
0001a1 df70      	RCALL __lcd_write_nibble_G100
                +
0001a2 ec88     +LDI R24 , LOW ( 200 )
0001a3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001a4 9701     +SBIW R24 , 1
0001a5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001a6 e2a8      	LDI  R26,LOW(40)
0001a7 df8f      	RCALL __lcd_write_data
0001a8 e0a4      	LDI  R26,LOW(4)
0001a9 df8d      	RCALL __lcd_write_data
0001aa e8a5      	LDI  R26,LOW(133)
0001ab df8b      	RCALL __lcd_write_data
0001ac e0a6      	LDI  R26,LOW(6)
0001ad df89      	RCALL __lcd_write_data
0001ae dfa1      	RCALL _lcd_clear
                 _0x20C0002:
0001af 9621      	ADIW R28,1
0001b0 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G102:
                 ; .FSTART _put_buff_G102
0001b1 93ba      	ST   -Y,R27
0001b2 93aa      	ST   -Y,R26
0001b3 931a      	ST   -Y,R17
0001b4 930a      	ST   -Y,R16
0001b5 81aa      	LDD  R26,Y+2
0001b6 81bb      	LDD  R27,Y+2+1
0001b7 9612      	ADIW R26,2
0001b8 940e 03cf 	CALL __GETW1P
0001ba 9730      	SBIW R30,0
0001bb f159      	BREQ _0x2040010
0001bc 81aa      	LDD  R26,Y+2
0001bd 81bb      	LDD  R27,Y+2+1
0001be 9614      	ADIW R26,4
0001bf 940e 03cf 	CALL __GETW1P
0001c1 018f      	MOVW R16,R30
0001c2 9730      	SBIW R30,0
0001c3 f061      	BREQ _0x2040012
                +
0001c4 3002     +CPI R16 , LOW ( 2 )
0001c5 e0e0     +LDI R30 , HIGH ( 2 )
0001c6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0001c7 f098      	BRLO _0x2040013
0001c8 01f8      	MOVW R30,R16
0001c9 9731      	SBIW R30,1
0001ca 018f      	MOVW R16,R30
                +
0001cb 81aa     +LDD R26 , Y + 2
0001cc 81bb     +LDD R27 , Y + 2 + 1
0001cd 9614     +ADIW R26 , 4
0001ce 93ed     +ST X + , R30
0001cf 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2040012:
0001d0 81aa      	LDD  R26,Y+2
0001d1 81bb      	LDD  R27,Y+2+1
0001d2 9612      	ADIW R26,2
0001d3 91ed      	LD   R30,X+
0001d4 91fd      	LD   R31,X+
0001d5 9631      	ADIW R30,1
0001d6 93fe      	ST   -X,R31
0001d7 93ee      	ST   -X,R30
0001d8 9731      	SBIW R30,1
0001d9 81ac      	LDD  R26,Y+4
0001da 83a0      	STD  Z+0,R26
                 _0x2040013:
0001db 81aa      	LDD  R26,Y+2
0001dc 81bb      	LDD  R27,Y+2+1
0001dd 940e 03cf 	CALL __GETW1P
0001df 23ff      	TST  R31
0001e0 f02a      	BRMI _0x2040014
0001e1 91ed      	LD   R30,X+
0001e2 91fd      	LD   R31,X+
0001e3 9631      	ADIW R30,1
0001e4 93fe      	ST   -X,R31
0001e5 93ee      	ST   -X,R30
                 _0x2040014:
0001e6 c006      	RJMP _0x2040015
                 _0x2040010:
0001e7 81aa      	LDD  R26,Y+2
0001e8 81bb      	LDD  R27,Y+2+1
0001e9 efef      	LDI  R30,LOW(65535)
0001ea efff      	LDI  R31,HIGH(65535)
0001eb 93ed      	ST   X+,R30
0001ec 93fc      	ST   X,R31
                 _0x2040015:
0001ed 8119      	LDD  R17,Y+1
0001ee 8108      	LDD  R16,Y+0
0001ef 9625      	ADIW R28,5
0001f0 9508      	RET
                 ; .FEND
                 __print_G102:
                 ; .FSTART __print_G102
0001f1 93ba      	ST   -Y,R27
0001f2 93aa      	ST   -Y,R26
0001f3 9726      	SBIW R28,6
0001f4 940e 03dc 	CALL __SAVELOCR6
0001f6 e010      	LDI  R17,0
0001f7 85ac      	LDD  R26,Y+12
0001f8 85bd      	LDD  R27,Y+12+1
0001f9 e0e0      	LDI  R30,LOW(0)
0001fa e0f0      	LDI  R31,HIGH(0)
0001fb 93ed      	ST   X+,R30
0001fc 93fc      	ST   X,R31
                 _0x2040016:
0001fd 89ea      	LDD  R30,Y+18
0001fe 89fb      	LDD  R31,Y+18+1
0001ff 9631      	ADIW R30,1
000200 8bea      	STD  Y+18,R30
000201 8bfb      	STD  Y+18+1,R31
000202 9731      	SBIW R30,1
000203 91e4      	LPM  R30,Z
000204 2f2e      	MOV  R18,R30
000205 30e0      	CPI  R30,0
000206 f409      	BRNE PC+2
000207 c115      	RJMP _0x2040018
000208 2fe1      	MOV  R30,R17
000209 30e0      	CPI  R30,0
00020a f439      	BRNE _0x204001C
00020b 3225      	CPI  R18,37
00020c f411      	BRNE _0x204001D
00020d e011      	LDI  R17,LOW(1)
00020e c002      	RJMP _0x204001E
                 _0x204001D:
00020f 940e 0391 	CALL SUBOPT_0x4
                 _0x204001E:
000211 c10a      	RJMP _0x204001B
                 _0x204001C:
000212 30e1      	CPI  R30,LOW(0x1)
000213 f4a9      	BRNE _0x204001F
000214 3225      	CPI  R18,37
000215 f419      	BRNE _0x2040020
000216 940e 0391 	CALL SUBOPT_0x4
000218 c102      	RJMP _0x20400CC
                 _0x2040020:
000219 e012      	LDI  R17,LOW(2)
00021a e040      	LDI  R20,LOW(0)
00021b e000      	LDI  R16,LOW(0)
00021c 322d      	CPI  R18,45
00021d f411      	BRNE _0x2040021
00021e e001      	LDI  R16,LOW(1)
00021f c0fc      	RJMP _0x204001B
                 _0x2040021:
000220 322b      	CPI  R18,43
000221 f411      	BRNE _0x2040022
000222 e24b      	LDI  R20,LOW(43)
000223 c0f8      	RJMP _0x204001B
                 _0x2040022:
000224 3220      	CPI  R18,32
000225 f411      	BRNE _0x2040023
000226 e240      	LDI  R20,LOW(32)
000227 c0f4      	RJMP _0x204001B
                 _0x2040023:
000228 c002      	RJMP _0x2040024
                 _0x204001F:
000229 30e2      	CPI  R30,LOW(0x2)
00022a f439      	BRNE _0x2040025
                 _0x2040024:
00022b e050      	LDI  R21,LOW(0)
00022c e013      	LDI  R17,LOW(3)
00022d 3320      	CPI  R18,48
00022e f411      	BRNE _0x2040026
00022f 6800      	ORI  R16,LOW(128)
000230 c0eb      	RJMP _0x204001B
                 _0x2040026:
000231 c003      	RJMP _0x2040027
                 _0x2040025:
000232 30e3      	CPI  R30,LOW(0x3)
000233 f009      	BREQ PC+2
000234 c0e7      	RJMP _0x204001B
                 _0x2040027:
000235 3320      	CPI  R18,48
000236 f010      	BRLO _0x204002A
000237 332a      	CPI  R18,58
000238 f008      	BRLO _0x204002B
                 _0x204002A:
000239 c007      	RJMP _0x2040029
                 _0x204002B:
00023a e0aa      	LDI  R26,LOW(10)
00023b 9f5a      	MUL  R21,R26
00023c 2d50      	MOV  R21,R0
00023d 2fe2      	MOV  R30,R18
00023e 53e0      	SUBI R30,LOW(48)
00023f 0f5e      	ADD  R21,R30
000240 c0db      	RJMP _0x204001B
                 _0x2040029:
000241 2fe2      	MOV  R30,R18
000242 36e3      	CPI  R30,LOW(0x63)
000243 f449      	BRNE _0x204002F
000244 940e 0398 	CALL SUBOPT_0x5
000246 89e8      	LDD  R30,Y+16
000247 89f9      	LDD  R31,Y+16+1
000248 81a4      	LDD  R26,Z+4
000249 93aa      	ST   -Y,R26
00024a 940e 039e 	CALL SUBOPT_0x6
00024c c0ce      	RJMP _0x2040030
                 _0x204002F:
00024d 37e3      	CPI  R30,LOW(0x73)
00024e f441      	BRNE _0x2040032
00024f 940e 0398 	CALL SUBOPT_0x5
000251 940e 03a4 	CALL SUBOPT_0x7
000253 940e 0359 	CALL _strlen
000255 2f1e      	MOV  R17,R30
000256 c00a      	RJMP _0x2040033
                 _0x2040032:
000257 37e0      	CPI  R30,LOW(0x70)
000258 f461      	BRNE _0x2040035
000259 940e 0398 	CALL SUBOPT_0x5
00025b 940e 03a4 	CALL SUBOPT_0x7
00025d 940e 0365 	CALL _strlenf
00025f 2f1e      	MOV  R17,R30
000260 6008      	ORI  R16,LOW(8)
                 _0x2040033:
000261 6002      	ORI  R16,LOW(2)
000262 770f      	ANDI R16,LOW(127)
000263 e030      	LDI  R19,LOW(0)
000264 c034      	RJMP _0x2040036
                 _0x2040035:
000265 36e4      	CPI  R30,LOW(0x64)
000266 f011      	BREQ _0x2040039
000267 36e9      	CPI  R30,LOW(0x69)
000268 f411      	BRNE _0x204003A
                 _0x2040039:
000269 6004      	ORI  R16,LOW(4)
00026a c002      	RJMP _0x204003B
                 _0x204003A:
00026b 37e5      	CPI  R30,LOW(0x75)
00026c f431      	BRNE _0x204003C
                 _0x204003B:
00026d e8ec      	LDI  R30,LOW(_tbl10_G102*2)
00026e e0f0      	LDI  R31,HIGH(_tbl10_G102*2)
00026f 83ee      	STD  Y+6,R30
000270 83ff      	STD  Y+6+1,R31
000271 e015      	LDI  R17,LOW(5)
000272 c00c      	RJMP _0x204003D
                 _0x204003C:
000273 35e8      	CPI  R30,LOW(0x58)
000274 f411      	BRNE _0x204003F
000275 6008      	ORI  R16,LOW(8)
000276 c003      	RJMP _0x2040040
                 _0x204003F:
000277 37e8      	CPI  R30,LOW(0x78)
000278 f009      	BREQ PC+2
000279 c0a1      	RJMP _0x2040071
                 _0x2040040:
00027a e9e6      	LDI  R30,LOW(_tbl16_G102*2)
00027b e0f0      	LDI  R31,HIGH(_tbl16_G102*2)
00027c 83ee      	STD  Y+6,R30
00027d 83ff      	STD  Y+6+1,R31
00027e e014      	LDI  R17,LOW(4)
                 _0x204003D:
00027f ff02      	SBRS R16,2
000280 c014      	RJMP _0x2040042
000281 940e 0398 	CALL SUBOPT_0x5
000283 940e 03ae 	CALL SUBOPT_0x8
000285 85ab      	LDD  R26,Y+11
000286 23aa      	TST  R26
000287 f43a      	BRPL _0x2040043
000288 85ea      	LDD  R30,Y+10
000289 85fb      	LDD  R31,Y+10+1
00028a 940e 03cb 	CALL __ANEGW1
00028c 87ea      	STD  Y+10,R30
00028d 87fb      	STD  Y+10+1,R31
00028e e24d      	LDI  R20,LOW(45)
                 _0x2040043:
00028f 3040      	CPI  R20,0
000290 f011      	BREQ _0x2040044
000291 5f1f      	SUBI R17,-LOW(1)
000292 c001      	RJMP _0x2040045
                 _0x2040044:
000293 7f0b      	ANDI R16,LOW(251)
                 _0x2040045:
000294 c004      	RJMP _0x2040046
                 _0x2040042:
000295 940e 0398 	CALL SUBOPT_0x5
000297 940e 03ae 	CALL SUBOPT_0x8
                 _0x2040046:
                 _0x2040036:
000299 fd00      	SBRC R16,0
00029a c011      	RJMP _0x2040047
                 _0x2040048:
00029b 1715      	CP   R17,R21
00029c f478      	BRSH _0x204004A
00029d ff07      	SBRS R16,7
00029e c008      	RJMP _0x204004B
00029f ff02      	SBRS R16,2
0002a0 c004      	RJMP _0x204004C
0002a1 7f0b      	ANDI R16,LOW(251)
0002a2 2f24      	MOV  R18,R20
0002a3 5011      	SUBI R17,LOW(1)
0002a4 c001      	RJMP _0x204004D
                 _0x204004C:
0002a5 e320      	LDI  R18,LOW(48)
                 _0x204004D:
0002a6 c001      	RJMP _0x204004E
                 _0x204004B:
0002a7 e220      	LDI  R18,LOW(32)
                 _0x204004E:
0002a8 940e 0391 	CALL SUBOPT_0x4
0002aa 5051      	SUBI R21,LOW(1)
0002ab cfef      	RJMP _0x2040048
                 _0x204004A:
                 _0x2040047:
0002ac 2f31      	MOV  R19,R17
0002ad ff01      	SBRS R16,1
0002ae c017      	RJMP _0x204004F
                 _0x2040050:
0002af 3030      	CPI  R19,0
0002b0 f0a1      	BREQ _0x2040052
0002b1 ff03      	SBRS R16,3
0002b2 c006      	RJMP _0x2040053
0002b3 81ee      	LDD  R30,Y+6
0002b4 81ff      	LDD  R31,Y+6+1
0002b5 9125      	LPM  R18,Z+
0002b6 83ee      	STD  Y+6,R30
0002b7 83ff      	STD  Y+6+1,R31
0002b8 c005      	RJMP _0x2040054
                 _0x2040053:
0002b9 81ae      	LDD  R26,Y+6
0002ba 81bf      	LDD  R27,Y+6+1
0002bb 912d      	LD   R18,X+
0002bc 83ae      	STD  Y+6,R26
0002bd 83bf      	STD  Y+6+1,R27
                 _0x2040054:
0002be 940e 0391 	CALL SUBOPT_0x4
0002c0 3050      	CPI  R21,0
0002c1 f009      	BREQ _0x2040055
0002c2 5051      	SUBI R21,LOW(1)
                 _0x2040055:
0002c3 5031      	SUBI R19,LOW(1)
0002c4 cfea      	RJMP _0x2040050
                 _0x2040052:
0002c5 c04b      	RJMP _0x2040056
                 _0x204004F:
                 _0x2040058:
0002c6 e320      	LDI  R18,LOW(48)
0002c7 81ee      	LDD  R30,Y+6
0002c8 81ff      	LDD  R31,Y+6+1
0002c9 940e 03d3 	CALL __GETW1PF
0002cb 87e8      	STD  Y+8,R30
0002cc 87f9      	STD  Y+8+1,R31
0002cd 81ee      	LDD  R30,Y+6
0002ce 81ff      	LDD  R31,Y+6+1
0002cf 9632      	ADIW R30,2
0002d0 83ee      	STD  Y+6,R30
0002d1 83ff      	STD  Y+6+1,R31
                 _0x204005A:
0002d2 85e8      	LDD  R30,Y+8
0002d3 85f9      	LDD  R31,Y+8+1
0002d4 85aa      	LDD  R26,Y+10
0002d5 85bb      	LDD  R27,Y+10+1
0002d6 17ae      	CP   R26,R30
0002d7 07bf      	CPC  R27,R31
0002d8 f050      	BRLO _0x204005C
0002d9 5f2f      	SUBI R18,-LOW(1)
0002da 85a8      	LDD  R26,Y+8
0002db 85b9      	LDD  R27,Y+8+1
0002dc 85ea      	LDD  R30,Y+10
0002dd 85fb      	LDD  R31,Y+10+1
0002de 1bea      	SUB  R30,R26
0002df 0bfb      	SBC  R31,R27
0002e0 87ea      	STD  Y+10,R30
0002e1 87fb      	STD  Y+10+1,R31
0002e2 cfef      	RJMP _0x204005A
                 _0x204005C:
0002e3 332a      	CPI  R18,58
0002e4 f028      	BRLO _0x204005D
0002e5 ff03      	SBRS R16,3
0002e6 c002      	RJMP _0x204005E
0002e7 5f29      	SUBI R18,-LOW(7)
0002e8 c001      	RJMP _0x204005F
                 _0x204005E:
0002e9 5d29      	SUBI R18,-LOW(39)
                 _0x204005F:
                 _0x204005D:
0002ea fd04      	SBRC R16,4
0002eb c01a      	RJMP _0x2040061
0002ec 3321      	CPI  R18,49
0002ed f420      	BRSH _0x2040063
0002ee 85a8      	LDD  R26,Y+8
0002ef 85b9      	LDD  R27,Y+8+1
0002f0 9711      	SBIW R26,1
0002f1 f409      	BRNE _0x2040062
                 _0x2040063:
0002f2 c009      	RJMP _0x20400CD
                 _0x2040062:
0002f3 1753      	CP   R21,R19
0002f4 f010      	BRLO _0x2040067
0002f5 ff00      	SBRS R16,0
0002f6 c001      	RJMP _0x2040068
                 _0x2040067:
0002f7 c013      	RJMP _0x2040066
                 _0x2040068:
0002f8 e220      	LDI  R18,LOW(32)
0002f9 ff07      	SBRS R16,7
0002fa c00b      	RJMP _0x2040069
0002fb e320      	LDI  R18,LOW(48)
                 _0x20400CD:
0002fc 6100      	ORI  R16,LOW(16)
0002fd ff02      	SBRS R16,2
0002fe c007      	RJMP _0x204006A
0002ff 7f0b      	ANDI R16,LOW(251)
000300 934a      	ST   -Y,R20
000301 940e 039e 	CALL SUBOPT_0x6
000303 3050      	CPI  R21,0
000304 f009      	BREQ _0x204006B
000305 5051      	SUBI R21,LOW(1)
                 _0x204006B:
                 _0x204006A:
                 _0x2040069:
                 _0x2040061:
000306 940e 0391 	CALL SUBOPT_0x4
000308 3050      	CPI  R21,0
000309 f009      	BREQ _0x204006C
00030a 5051      	SUBI R21,LOW(1)
                 _0x204006C:
                 _0x2040066:
00030b 5031      	SUBI R19,LOW(1)
00030c 85a8      	LDD  R26,Y+8
00030d 85b9      	LDD  R27,Y+8+1
00030e 9712      	SBIW R26,2
00030f f008      	BRLO _0x2040059
000310 cfb5      	RJMP _0x2040058
                 _0x2040059:
                 _0x2040056:
000311 ff00      	SBRS R16,0
000312 c008      	RJMP _0x204006D
                 _0x204006E:
000313 3050      	CPI  R21,0
000314 f031      	BREQ _0x2040070
000315 5051      	SUBI R21,LOW(1)
000316 e2e0      	LDI  R30,LOW(32)
000317 93ea      	ST   -Y,R30
000318 940e 039e 	CALL SUBOPT_0x6
00031a cff8      	RJMP _0x204006E
                 _0x2040070:
                 _0x204006D:
                 _0x2040071:
                 _0x2040030:
                 _0x20400CC:
00031b e010      	LDI  R17,LOW(0)
                 _0x204001B:
00031c cee0      	RJMP _0x2040016
                 _0x2040018:
00031d 85ac      	LDD  R26,Y+12
00031e 85bd      	LDD  R27,Y+12+1
00031f 940e 03cf 	CALL __GETW1P
000321 940e 03e3 	CALL __LOADLOCR6
000323 9664      	ADIW R28,20
000324 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000325 92ff      	PUSH R15
000326 2ef8      	MOV  R15,R24
000327 9726      	SBIW R28,6
000328 940e 03de 	CALL __SAVELOCR4
00032a 940e 03b6 	CALL SUBOPT_0x9
00032c 9730      	SBIW R30,0
00032d f419      	BRNE _0x2040072
00032e efef      	LDI  R30,LOW(65535)
00032f efff      	LDI  R31,HIGH(65535)
000330 c023      	RJMP _0x20C0001
                 _0x2040072:
000331 01de      	MOVW R26,R28
000332 9616      	ADIW R26,6
000333 940e 03c7 	CALL __ADDW2R15
000335 018d      	MOVW R16,R26
000336 940e 03b6 	CALL SUBOPT_0x9
000338 83ee      	STD  Y+6,R30
000339 83ff      	STD  Y+6+1,R31
00033a e0e0      	LDI  R30,LOW(0)
00033b 87e8      	STD  Y+8,R30
00033c 87e9      	STD  Y+8+1,R30
00033d 01de      	MOVW R26,R28
00033e 961a      	ADIW R26,10
00033f 940e 03c7 	CALL __ADDW2R15
000341 940e 03cf 	CALL __GETW1P
000343 93fa      	ST   -Y,R31
000344 93ea      	ST   -Y,R30
000345 931a      	ST   -Y,R17
000346 930a      	ST   -Y,R16
000347 ebe1      	LDI  R30,LOW(_put_buff_G102)
000348 e0f1      	LDI  R31,HIGH(_put_buff_G102)
000349 93fa      	ST   -Y,R31
00034a 93ea      	ST   -Y,R30
00034b 01de      	MOVW R26,R28
00034c 961a      	ADIW R26,10
00034d dea3      	RCALL __print_G102
00034e 019f      	MOVW R18,R30
00034f 81ae      	LDD  R26,Y+6
000350 81bf      	LDD  R27,Y+6+1
000351 e0e0      	LDI  R30,LOW(0)
000352 93ec      	ST   X,R30
000353 01f9      	MOVW R30,R18
                 _0x20C0001:
000354 940e 03e5 	CALL __LOADLOCR4
000356 962a      	ADIW R28,10
000357 90ff      	POP  R15
000358 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000359 93ba      	ST   -Y,R27
00035a 93aa      	ST   -Y,R26
00035b 91a9          ld   r26,y+
00035c 91b9          ld   r27,y+
00035d 27ee          clr  r30
00035e 27ff          clr  r31
                 strlen0:
00035f 916d          ld   r22,x+
000360 2366          tst  r22
000361 f011          breq strlen1
000362 9631          adiw r30,1
000363 cffb          rjmp strlen0
                 strlen1:
000364 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000365 93ba      	ST   -Y,R27
000366 93aa      	ST   -Y,R26
000367 27aa          clr  r26
000368 27bb          clr  r27
000369 91e9          ld   r30,y+
00036a 91f9          ld   r31,y+
                 strlenf0:
00036b 9005      	lpm  r0,z+
00036c 2000          tst  r0
00036d f011          breq strlenf1
00036e 9611          adiw r26,1
00036f cffb          rjmp strlenf0
                 strlenf1:
000370 01fd          movw r30,r26
000371 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _buffer:
000500           	.BYTE 0xF
                 __base_y_G100:
00050f           	.BYTE 0x4
                 __seed_G101:
000513           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000372 2766      	CLR  R22
000373 2777      	CLR  R23
000374 940e 03d7 	CALL __PUTPARD1
000376 e084      	LDI  R24,4
000377 940e 0325 	CALL _sprintf
000379 9628      	ADIW R28,8
00037a e0e0      	LDI  R30,LOW(0)
00037b 93ea      	ST   -Y,R30
00037c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00037d 940e 0143 	CALL _lcd_gotoxy
00037f e0a0      	LDI  R26,LOW(_buffer)
000380 e0b5      	LDI  R27,HIGH(_buffer)
000381 940c 0171 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000383 940e 0137 	CALL __lcd_write_data
000385 e0a3      	LDI  R26,LOW(3)
000386 e0b0      	LDI  R27,0
000387 940c 03bd 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
000389 e3a0      	LDI  R26,LOW(48)
00038a 940e 0112 	CALL __lcd_write_nibble_G100
                +
00038c ec88     +LDI R24 , LOW ( 200 )
00038d e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00038e 9701     +SBIW R24 , 1
00038f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000390 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
000391 932a      	ST   -Y,R18
000392 85ad      	LDD  R26,Y+13
000393 85be      	LDD  R27,Y+13+1
000394 85ef      	LDD  R30,Y+15
000395 89f8      	LDD  R31,Y+15+1
000396 9509      	ICALL
000397 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000398 89e8      	LDD  R30,Y+16
000399 89f9      	LDD  R31,Y+16+1
00039a 9734      	SBIW R30,4
00039b 8be8      	STD  Y+16,R30
00039c 8bf9      	STD  Y+16+1,R31
00039d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
00039e 85ad      	LDD  R26,Y+13
00039f 85be      	LDD  R27,Y+13+1
0003a0 85ef      	LDD  R30,Y+15
0003a1 89f8      	LDD  R31,Y+15+1
0003a2 9509      	ICALL
0003a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0003a4 89a8      	LDD  R26,Y+16
0003a5 89b9      	LDD  R27,Y+16+1
0003a6 9614      	ADIW R26,4
0003a7 940e 03cf 	CALL __GETW1P
0003a9 83ee      	STD  Y+6,R30
0003aa 83ff      	STD  Y+6+1,R31
0003ab 81ae      	LDD  R26,Y+6
0003ac 81bf      	LDD  R27,Y+6+1
0003ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0003ae 89a8      	LDD  R26,Y+16
0003af 89b9      	LDD  R27,Y+16+1
0003b0 9614      	ADIW R26,4
0003b1 940e 03cf 	CALL __GETW1P
0003b3 87ea      	STD  Y+10,R30
0003b4 87fb      	STD  Y+10+1,R31
0003b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003b6 01de      	MOVW R26,R28
0003b7 961c      	ADIW R26,12
0003b8 940e 03c7 	CALL __ADDW2R15
0003ba 940e 03cf 	CALL __GETW1P
0003bc 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003bd 9610      	adiw r26,0
0003be f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003bf ed80     +LDI R24 , LOW ( 0x7D0 )
0003c0 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003c1 9701     +SBIW R24 , 1
0003c2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003c3 95a8      	wdr
0003c4 9711      	sbiw r26,1
0003c5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0003c6 9508      	ret
                 
                 __ADDW2R15:
0003c7 2400      	CLR  R0
0003c8 0daf      	ADD  R26,R15
0003c9 1db0      	ADC  R27,R0
0003ca 9508      	RET
                 
                 __ANEGW1:
0003cb 95f1      	NEG  R31
0003cc 95e1      	NEG  R30
0003cd 40f0      	SBCI R31,0
0003ce 9508      	RET
                 
                 __GETW1P:
0003cf 91ed      	LD   R30,X+
0003d0 91fc      	LD   R31,X
0003d1 9711      	SBIW R26,1
0003d2 9508      	RET
                 
                 __GETW1PF:
0003d3 9005      	LPM  R0,Z+
0003d4 91f4      	LPM  R31,Z
0003d5 2de0      	MOV  R30,R0
0003d6 9508      	RET
                 
                 __PUTPARD1:
0003d7 937a      	ST   -Y,R23
0003d8 936a      	ST   -Y,R22
0003d9 93fa      	ST   -Y,R31
0003da 93ea      	ST   -Y,R30
0003db 9508      	RET
                 
                 __SAVELOCR6:
0003dc 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003dd 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003de 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003df 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003e0 931a      	ST   -Y,R17
0003e1 930a      	ST   -Y,R16
0003e2 9508      	RET
                 
                 __LOADLOCR6:
0003e3 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003e4 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003e5 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003e6 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003e7 8119      	LDD  R17,Y+1
0003e8 8108      	LD   R16,Y
0003e9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128A register use summary:
r0 :  13 r1 :   3 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   3 r7 :   1 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:   8 r23:   4 
r24:  28 r25:   7 r26: 103 r27:  40 r28:  14 r29:   1 r30: 182 r31:  66 
x  :  23 y  : 199 z  :  15 
Registers used: 29 out of 35 (82.9%)

ATmega128A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  25 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  21 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   1 brne  :  31 brpl  :   1 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  53 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  11 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   4 cpi   :  34 cpse  :   0 dec   :   6 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   3 inc   :   2 jmp   :  38 ld    :  41 ldd   :  77 
ldi   : 104 lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  16 
movw  :  17 mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   0 ori   :   6 out   :  17 pop   :   1 push  :   1 rcall :  19 
ret   :  26 reti  :   1 rjmp  :  66 rol   :   0 ror   :   0 sbc   :   1 
sbci  :   2 sbi   :  17 sbic  :   0 sbis  :   1 sbiw  :  19 sbr   :   0 
sbrc  :   2 sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  76 std   :  31 sts   :   4 sub   :   1 subi  :  16 
swap  :   1 tst   :   4 wdr   :   1 
Instructions used: 54 out of 117 (46.2%)

ATmega128A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007d4   1924     80   2004  131072   1.5%
[.dseg] 0x000100 0x000517      0     23     23    4096   0.6%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 9 warnings
